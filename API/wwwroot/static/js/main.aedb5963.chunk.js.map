{"version":3,"sources":["App/Models/Pagination.ts","App/Api/agent.ts","App/Models/Event.ts","App/Models/Profile.ts","App/Stores/eventStore.ts","App/Stores/ModalStore.ts","App/Stores/ProfileStore.ts","App/Stores/UserStore.ts","App/Stores/store.ts","App/Stores/CommonStore.ts","App/Stores/CommentStore.ts","App/Layout/NavBar.tsx","Features/Events/Dashboard/EventFilter.tsx","Features/Profiles/ProfileCard.tsx","Features/Events/Dashboard/EventListItemInterestee.tsx","Features/Events/Dashboard/EventListItem.tsx","Features/Events/Dashboard/EventsList.tsx","Features/Events/Dashboard/eventListItemPlaceholder.tsx","Features/Events/Dashboard/EventDashboard.tsx","App/Common/Form/MyTextInput.tsx","Features/Users/LoginForm.tsx","Features/errors/ValidationErrors.tsx","Features/Users/RegisterForm.tsx","Features/Home/HomePage.tsx","App/Layout/LoadingComponent.tsx","App/Common/Form/MyTextArea.tsx","App/Common/Form/MySelectInput.tsx","App/Common/Options/CategoryOptions.ts","App/Common/Form/MyDateInput.tsx","Features/Events/Form/EventForm.tsx","Features/Events/Details/EventDetailedChat.tsx","Features/Events/Details/EventDetailedHeader.tsx","Features/Events/Details/EventDetailedInfo.tsx","Features/Events/Details/EventDetailedSideBar.tsx","Features/Events/Details/EventDetails.tsx","Features/errors/TestErrors.tsx","Features/errors/NotFound.tsx","Features/errors/ServerError.tsx","App/Common/Modals/ModelContainer.tsx","Features/Profiles/ProfileEditForm.tsx","Features/Profiles/ProfileAbout.tsx","Features/Profiles/ProfileEvents.tsx","App/Common/ImageUpload/PhotoWidgetCropper.tsx","App/Common/ImageUpload/PhotoWidgetDropzone.tsx","App/Common/ImageUpload/PhotoUploadWidget.tsx","Features/Profiles/ProfilePhotos.tsx","Features/Profiles/ProfileContent.tsx","Features/Profiles/ProfileHeader.tsx","Features/Profiles/ProfilePage.tsx","App/Layout/PrivateRoute.tsx","App/Layout/App.tsx","reportWebVitals.ts","App/Layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","pagination","data","this","PagingParams","pageNumber","sizeNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","History","push","console","log","modelStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","events","list","params","details","id","create","event","update","interest","accounts","current","login","user","register","profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","listEvents","predicate","listAllEvents","updateProfile","profile","IEvent","init","Object","assign","EventFormValues","undefined","title","categories","description","date","region","Profile","userName","displayName","image","EventStore","eventsRegistry","Map","selectedEvent","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadEvents","setLoadingInitial","axiosParams","setEvent","runInAction","setPagination","loadEventById","getEvent","state","createEvent","userStore","interestee","newEvent","hostUsername","interestees","updateEvent","updatedEvent","deleteEvent","updateInterest","isGoing","filter","cancelEventToggel","isCancelled","clearSelectedEvent","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","eventsByDate","reduce","format","some","isHost","host","find","x","Date","ModalStore","modal","open","content","ProfileStore","loadingProfile","uploading","userEvents","loadingEvents","loadProfile","photo","photos","isMain","setImage","p","loadUserEvents","loadAllUserEvents","setDisplayName","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","eventStore","getItem","appLoaded","ServerError","setAppLoaded","setItem","profileStore","commentStore","comments","hubConnection","createHubConnection","eventId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComment","addComment","invoke","eventContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","exact","as","NavLink","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","Header","attached","color","Icon","active","has","onChange","Card","Content","Description","str","length","substring","truncate","bio","extra","List","horizontal","map","Popup","hoverable","trigger","circular","Segment","Group","Label","textAlign","marginBottom","basic","Grid","Column","secondary","clearing","floated","groupedEvents","e","sub","divided","EventListItemPlaceholder","Placeholder","fluid","marginTop","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","err","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","email","validationSchema","Yup","required","isValid","dirty","isLoggedIn","openModal","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOption","MyDateInput","selected","useParams","history","useHistory","nullable","subheader","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","preventDefault","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","eventImageStyle","eventImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","Extra","EventDetailedInfo","EventDetailedChat","EventDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","centered","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","category","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderColor","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","ButtonGroup","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileEvents","menuPosition","Statistic","Divider","Reveal","animated","visible","hidden","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","ModelContainer","path","HomePage","EventDashboard","EventDetails","EventForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.aedb5963.chunk.js","sourcesContent":["export default interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(pagination: Pagination, data : T) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n        \r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, sizeNumber = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = sizeNumber;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { History } from \"../..\";\r\nimport { EventFormValues, IEvent } from \"../Models/Event\";\r\nimport { PaginatedResult } from \"../Models/Pagination\";\r\nimport { Photo, Profile, UserEvent } from \"../Models/Profile\";\r\nimport { User, UserFormValues } from \"../Models/User\";\r\nimport { store } from \"../Stores/store\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n        return config\r\n    }else{\r\n        return config;\r\n    }\r\n})\r\n\r\naxios.interceptors.response.use(async response=>{\r\n        if(process.env.NODE_ENV === \"development\") await sleep(1000);\r\n        const pagination = response.headers[\"pagination\"];\r\n        if(pagination) {\r\n            response.data = new PaginatedResult(JSON.parse(pagination), response.data);\r\n            return response as AxiosResponse<PaginatedResult<any>>\r\n        }\r\n        return response;\r\n},(error: AxiosError)=>{\r\n    const {data, status,config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n\r\n            if(config.method === \"get\" && data.errors.hasOwnProperty('id') ){\r\n                History.push('/NotFound');\r\n            }\r\n            if (data.errors) \r\n            {\r\n                console.log(data.errors);\r\n                const modelStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if (data.errors[key]) {\r\n                        modelStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat();\r\n            } \r\n            break;\r\n        case 401:\r\n            toast.error(\"unauthorized\");          \r\n            break;\r\n        case 404:\r\n             History.push('/NotFound')\r\n             break;\r\n         case 500:\r\n            console.log(data);\r\n            store.commonStore.setServerError(data);\r\n            History.push('/server-error')       \r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst sleep = (delay: number)=>{\r\n    return new Promise((resolve)=>{\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\nconst requests = {\r\n    get:<T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post:<T> (url: string, body: {}) => axios.post<T>(url,body).then(responseBody),\r\n    put:<T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete:<T> (url: string) => axios.delete<T>(url).then(responseBody)\r\n\r\n}\r\n\r\nconst events = {\r\n    list: (params: URLSearchParams)=> axios.get<PaginatedResult<IEvent[]>>('/Events', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<IEvent>(`/Events/${id}`),\r\n    create: (event: EventFormValues) => requests.post<void>(`/Events`,event),\r\n    update: (event: EventFormValues) => requests.put<void>(`/Events/${event.id}`, event),\r\n    delete: (id: string) => requests.delete<void>(`/Events/${id}`),\r\n    interest: (id: string) => requests.post<void>(`/Events/${id}/interest`, {})\r\n}\r\n\r\nconst accounts = {\r\n    current: () => requests.get<User>(`/account`),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto : (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setmain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    listEvents: (username: string, predicate: string) => requests.get<UserEvent[]>(`/profiles/${username}/events?predicate=${predicate}`),\r\n    listAllEvents: (username: string) => requests.get<UserEvent[]>(`/profiles/${username}/events`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile)\r\n}\r\n\r\nconst agent = {\r\n    events,\r\n    accounts,\r\n    profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./Profile\";\r\n\r\nexport interface IEvent {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    date: Date | null;\r\n    region: string;\r\n    categories: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: Boolean;\r\n    host?: Profile;\r\n    interestees: Profile[];\r\n}\r\n\r\nexport class IEvent implements IEvent {\r\n    constructor(init?: EventFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n} \r\n\r\nexport class EventFormValues {\r\n    id? : string = undefined;\r\n    title: string = '';\r\n    categories: string = '';\r\n    description : string = '';\r\n    date: Date | null = null;\r\n    region: string = '';\r\n    \r\n    constructor(event?: EventFormValues) {\r\n        if(event) {\r\n            this.id = event.id;\r\n            this.title = event.title;\r\n            this.categories = event.categories;\r\n            this.date = event.date;\r\n            this.description = event.description;\r\n            this.region = event.region;\r\n        }\r\n    }\r\n}","import { User } from \"./User\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[]\r\n}\r\n\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.userName;\r\n        this.displayName = user.userName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserEvent {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../Api/agent\";\r\nimport { EventFormValues, IEvent } from \"../Models/Event\";\r\nimport Pagination, { PagingParams } from \"../Models/Pagination\";\r\nimport { Profile } from \"../Models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class EventStore{\r\n    // events: IEvent[]= [];\r\n    eventsRegistry = new Map<string, IEvent>();\r\n    selectedEvent : IEvent | undefined = undefined;\r\n    editMode = false;\r\n    loading =false;\r\n    loadingInitial= true;\r\n    pagination: Pagination | null = null;\r\n    pagingParams: PagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true)\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n\r\n        reaction(() => this.predicate.keys(),\r\n        () => {\r\n          this.pagingParams = new PagingParams();\r\n          console.log(this.pagingParams)\r\n          this.eventsRegistry.clear();\r\n          this.loadEvents();\r\n        })\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n      this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string , value: string | Date) => {\r\n      const resetPredicate = () => {\r\n        this.predicate.forEach((value, key) => {\r\n          // console.log(key);\r\n          if(key !== 'startAt') this.predicate.delete(key);\r\n        })\r\n      }\r\n      switch(predicate) {\r\n        case 'all':\r\n          resetPredicate();\r\n          this.predicate.set('all' , true);\r\n          break;\r\n        case 'isGoing':\r\n          resetPredicate();\r\n          this.predicate.set('isGoing', true);\r\n          break;\r\n        case 'isHost':\r\n          resetPredicate();\r\n          this.predicate.set('isHost', true);\r\n          break;\r\n        case 'startDate':\r\n          this.predicate.delete('startAt');\r\n          this.predicate.set('startAt', value);\r\n\r\n      }\r\n    }\r\n\r\n    get axiosParams() {\r\n      const params = new URLSearchParams();\r\n      params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n      params.append('pageSize', this.pagingParams.pageSize.toString());\r\n      this.predicate.forEach((value, key) => {\r\n        if(key === \"startAt\") {\r\n          console.log(value);\r\n          params.append(key, (value as Date).toISOString());\r\n        } else {\r\n          params.append(key, value);\r\n        }\r\n      })\r\n      return params\r\n    }\r\n\r\n    get eventsByDate(){\r\n      return Array.from(this.eventsRegistry.values()).sort((a, b) => \r\n      a.date!.getTime() - a.date!.getTime());\r\n    }\r\n\r\n    get groupedEvents(){\r\n      return Object.entries(\r\n        this.eventsByDate.reduce((events, event)=>{\r\n          const date = format(event.date!, 'dd MMM yyyy') ;\r\n          // events[date] = events[date] ? [...events[date], event] : [event];\r\n          if (!events[date]) {\r\n            events[date] = [event];\r\n            \r\n          }else{\r\n            events[date].push(event);\r\n          }\r\n\r\n          return events\r\n        }, {} as {[Key: string]: IEvent[]})\r\n      )\r\n    }\r\n\r\n    loadEvents = async ()=>{\r\n      this.setLoadingInitial(true);\r\n      try {\r\n        const events = await agent.events.list(this.axiosParams);\r\n\r\n            events.data.forEach(event=> {\r\n                this.setEvent(event);\r\n                // this.events.push(event);\r\n                runInAction(()=>{\r\n                  this.eventsRegistry.set(event.id, event);\r\n                });\r\n              }) ;\r\n              this.setPagination(events.pagination);\r\n              this.setLoadingInitial(false);\r\n\r\n      } catch (error) {\r\n          console.log(error);\r\n          this.setLoadingInitial(false);\r\n      }\r\n    }\r\n\r\n    setPagination(pagination: Pagination) {\r\n      this.pagination = pagination;\r\n    }\r\n\r\n    loadEventById = async (id : string)=>{\r\n      let event = this.getEvent(id);\r\n      if(event){\r\n        this.selectedEvent = event;\r\n        return event;\r\n      } else {\r\n        this.loadingInitial = true;\r\n        try {\r\n          event = await agent.events.details(id);\r\n          this.setEvent(event);\r\n          runInAction(()=>{\r\n            this.selectedEvent =event;\r\n          });\r\n          this.setLoadingInitial(false);\r\n          return event;\r\n          \r\n        } catch (error) {\r\n          console.log(error);\r\n          this.setLoadingInitial(false);\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    private getEvent(id:string){\r\n      return this.eventsRegistry.get(id);\r\n    }\r\n\r\n    private setEvent(event: IEvent){\r\n      const user = store.userStore.user;\r\n      if(user) {\r\n        console.log(user.userName);\r\n        event.isGoing = event.interestees!.some(\r\n          a => a.username === user.userName\r\n        );\r\n        event.isHost = event.hostUsername === user.userName;\r\n        event.host = event.interestees?.find(x => x.username === event.hostUsername)\r\n      }\r\n      event.date = new Date(event.date!);\r\n      this.eventsRegistry.set(event.id, event);\r\n    }\r\n\r\n   setLoadingInitial = (state: boolean)=>{\r\n     this.loadingInitial = state;\r\n   }\r\n\r\n  //  selectEvent = (id: string)=>{\r\n  //   //  this.selectedEvent= this.events.find(a => a.id===id);\r\n  //   this.selectedEvent = this.eventsRegistry.get(id);\r\n  //  }\r\n\r\n  //  cancelSelectedEvent=()=>{\r\n  //     this.selectedEvent= undefined;\r\n  //  }\r\n\r\n  //  openForm = (id?: string)=>{\r\n  //     id ? this.selectEvent(id) : this.cancelSelectedEvent();\r\n  //     this.editMode=true\r\n  //  }\r\n\r\n  //  closeForm=()=>{\r\n  //    this.editMode=false;\r\n  //  }\r\n\r\n   createEvent=async (event: EventFormValues)=>{\r\n     const user = store.userStore.user;\r\n     const interestee = new Profile(user!);\r\n     try {\r\n       await agent.events.create(event);\r\n       const newEvent = new IEvent(event);\r\n       newEvent.hostUsername = user!.userName;\r\n       newEvent.interestees = [interestee];\r\n       this.setEvent(newEvent);\r\n       runInAction(()=>{\r\n        //  this.events.push(event);\r\n        this.selectedEvent = newEvent;\r\n       })\r\n       \r\n     } catch (error) {\r\n       console.log(error);\r\n       runInAction(()=>{\r\n         this.loading=false;\r\n       })\r\n     }\r\n   }\r\n\r\n   updateEvent= async (event: EventFormValues)=>{\r\n     try {\r\n       await agent.events.update(event);\r\n       runInAction(()=>{\r\n         if(event.id) {\r\n           let updatedEvent = {...this.getEvent(event.id), ...event};\r\n           this.eventsRegistry.set(updatedEvent.id!, updatedEvent as IEvent);\r\n           this.selectedEvent=event as IEvent;\r\n         }\r\n        //  this.events=[...this.events.filter(x=>x.id!== event.id), event];\r\n        //  this.events.forEach(element => {\r\n        //    console.log(element);\r\n        //  })   \r\n       })\r\n     } catch (error) {\r\n       console.log(error);\r\n       runInAction(()=>{\r\n         this.loading=false\r\n       })\r\n     }\r\n   }\r\n\r\n   deleteEvent = async (id: string)=>{\r\n     this.loading=true;\r\n     try {\r\n       await agent.events.delete(id);\r\n       runInAction(()=>{\r\n        this.eventsRegistry.delete(id);\r\n        this.loading= false;\r\n       })\r\n\r\n       \r\n     } catch (error) {\r\n       console.log(error);\r\n       runInAction(()=>{\r\n         this.loading= false;\r\n       })\r\n     }\r\n   }\r\n\r\n   updateInterest = async () => {\r\n     const user = store.userStore.user;\r\n     this.loading = true;\r\n     try {\r\n       await agent.events.interest(this.selectedEvent!.id);\r\n       runInAction(() => {\r\n         if (this.selectedEvent?.isGoing) {\r\n           this.selectedEvent.interestees = this.selectedEvent.interestees?.filter(a => a.username !== user?.userName);\r\n           this.selectedEvent.isGoing = false;\r\n         } else {\r\n           const interestee = new Profile(user!);\r\n           this.selectedEvent?.interestees?.push(interestee);\r\n           this.selectedEvent!.isGoing = true;\r\n         }\r\n         this.eventsRegistry.set(this.selectedEvent!.id, this.selectedEvent!);\r\n       })\r\n     } catch (error) {\r\n       console.log(error);\r\n     } finally {\r\n       runInAction(()=> {\r\n         this.loading = false;\r\n       })\r\n     }\r\n   }\r\n\r\n   cancelEventToggel = async () => {\r\n     this.loading = true;\r\n     try {\r\n       await agent.events.interest(this.selectedEvent!.id);\r\n       runInAction(() => {\r\n         this.selectedEvent!.isCancelled = !this.selectedEvent?.isCancelled;\r\n         this.eventsRegistry.set(this.selectedEvent!.id, this.selectedEvent!);\r\n       })\r\n     } catch (error) {\r\n       console.log(error);\r\n     } finally {\r\n       runInAction(() => {\r\n         this.loading = false;\r\n       })\r\n     }\r\n   }\r\n\r\n   clearSelectedEvent = () => {\r\n     this.selectedEvent = undefined;\r\n   }\r\n\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    body: null | JSX.Element\r\n}\r\n\r\nexport default class ModalStore {\r\n    \r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal(content: JSX.Element){\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n   closeModal(){\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../Api/agent\";\r\nimport { Photo, Profile, UserEvent } from \"../Models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile: boolean = false;\r\n    uploading: boolean = false;\r\n    loading: boolean = false;\r\n    userEvents: UserEvent[] = [];\r\n    loadingEvents: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                    this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.uploading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false; \r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    loadUserEvents = async (username: string, predicate?: string) => {\r\n        this.loadingEvents = true;\r\n        try {\r\n            const events = await agent.profiles.listEvents(username, predicate!);\r\n            runInAction(()=> {\r\n                this.userEvents = events;\r\n                this.loadingEvents = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingEvents = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadAllUserEvents = async (username: string) => {\r\n        this.loadingEvents = true;\r\n        try {\r\n            const events = await agent.profiles.listAllEvents(username)\r\n            runInAction(()=> {\r\n                this.userEvents = events;\r\n                this.loadingEvents = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingEvents = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName)\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { History } from \"../..\";\r\nimport agent from \"../Api/agent\";\r\nimport { User, UserFormValues } from \"../Models/User\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.accounts.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>{\r\n                this.user = user;\r\n            });\r\n            console.log(user);\r\n            History.push('/events');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw (error);\r\n        }\r\n    }\r\n\r\n    logout = async () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user =null;\r\n        History.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.accounts.current();\r\n            runInAction(\r\n                () => this.user = user\r\n            )\r\n        } catch(error) {\r\n            console.log(error);\r\n            \r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.accounts.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>{\r\n                this.user = user;\r\n            });\r\n            console.log(user);\r\n            History.push('/events');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw (error);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image\r\n        }\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if(this.user) {\r\n            this.user.displayName = displayName;\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport CommentStore from \"./CommentStore\";\r\nimport commonStore from \"./CommonStore\";\r\nimport eventStore from \"./eventStore\";\r\nimport ModalStore from \"./ModalStore\";\r\nimport ProfileStore from \"./ProfileStore\";\r\nimport UserStore from \"./UserStore\";\r\n\r\ninterface Store{\r\n    eventStore: eventStore,\r\n    commonStore: commonStore,\r\n    userStore: UserStore,\r\n    modalStore: ModalStore,\r\n    profileStore: ProfileStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store : Store = {\r\n    eventStore : new eventStore(),\r\n    commonStore: new commonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore : new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const eventContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(eventContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../Models/ServerError\";\r\n\r\nexport default class commonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded: boolean = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt' ,token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError=(ServerError: ServerError)=>{\r\n        this.error = ServerError;\r\n\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        if (token) {\r\n            this.token = token;\r\n        }\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../Models/Comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (eventId: string) => {\r\n        if(store.eventStore.selectedEvent) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                                           .withUrl(process.env.REACT_APP_CHAT_URL + \"?EventID=\" + eventId, {\r\n                                               accessTokenFactory: () => store.userStore.user?.token!\r\n                                           })\r\n                                           .withAutomaticReconnect()\r\n                                           .configureLogging(LogLevel.Information)\r\n                                           .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(error));\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    this.comments.forEach(comment => comment.createdAt = new Date(comment.createdAt));\r\n                });\r\n                this.comments = comments;\r\n            });\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    } \r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(error));\r\n    }\r\n\r\n    clearComment = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.eventId = store.eventStore.selectedEvent?.id;\r\n        try {\r\n            this.hubConnection?.invoke(\"SendComment\", values)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../Stores/store\";\r\n\r\n\r\nexport default observer( function NavBar(){\r\n\r\n    const {userStore: {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container >\r\n                <Menu.Item exact as={NavLink} to='/' header>\r\n                    <img src=\"/assets/logo.png\" alt=\"Logo\" style={{marginRight: '50px'}}></img>\r\n\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/events' name=\"Events\"/>\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Test errors\"/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createEvent' positive content='Create Event'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || 'assets/user.png'} avatar spaced='right'/>\r\n                    <Dropdown inverted='true' pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                           <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My profile' icon='user' />\r\n                           <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n\r\n        </Menu>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Icon, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\n\r\n\r\nexport default observer(function EventFilter(){\r\n    const {eventStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size={\"large\"} style={{width: '100%'}}>\r\n              <Header attached color='teal'>\r\n              <Icon name=\"filter\"/>Filters\r\n              </Header>\r\n              <Menu.Item\r\n               active={predicate.has('all')}\r\n               onClick={() => setPredicate('all', 'true')}\r\n               content='All events'/>\r\n              <Menu.Item  \r\n               content=\"I'm attending\"\r\n               active={predicate.has('isGoing')}\r\n               onClick={() => {\r\n                   setPredicate('isGoing', 'true')\r\n                   console.log(predicate)\r\n                }}\r\n              />\r\n              <Menu.Item \r\n               content=\"I'm hosting\"\r\n               active={predicate.has('isHost')}\r\n               onClick={() => setPredicate('isHost', 'true')}\r\n               />\r\n        </Menu>\r\n        <Header></Header>\r\n        <Calendar onChange={(date: Date) => setPredicate('startDate', date)} value={predicate.get('startDate') || new Date()}></Calendar>\r\n        </>\r\n\r\n        \r\n    )\r\n}\r\n)","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../App/Models/Profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n        return str.length > 30 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n        }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'}/>\r\n            <Card.Content>\r\n                <Card.Header>\r\n                    {profile.displayName}\r\n                </Card.Header>\r\n                <Card.Description>\r\n                    {truncate(profile.bio)}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                Followers\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../App/Models/Profile\";\r\nimport ProfileCard from \"../../Profiles/ProfileCard\";\r\n\r\ninterface Props{\r\n    interestees: Profile[];\r\n}\r\n\r\nexport default observer(function EventListItemInterestee({interestees}: Props) {\r\n    return (\r\n        <List horizontal>\r\n           {interestees.map(interestee => (\r\n                <Popup hoverable key={interestee.username} trigger={\r\n                    <List.Item key={interestee.username} as={Link} to={`/profiles/${interestee.username}`}>\r\n                       <Image size=\"mini\" circular src={interestee.image || 'assets/user.png'}/>\r\n                    </List.Item>\r\n                }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={interestee}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n           ))}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns/esm\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Grid, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { IEvent } from \"../../../App/Models/Event\";\r\nimport EventListItemInterestee from \"./EventListItemInterestee\";\r\n\r\ninterface IProps {\r\n    event : IEvent;\r\n}\r\n\r\nexport default observer( function EventListItem({event}: IProps){\r\n\r\n    return(\r\n        <Segment.Group>\r\n            <Segment>\r\n                {event.isCancelled &&\r\n                  <Label attached='top'color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                    <Item.Image style={{marginBottom: 3}} size='tiny' circular src={event.host?.image || '/assets/user.png'}></Item.Image>\r\n                    <Item.Content>\r\n                        <Item.Header as={Link} to={`events/${event.id}`}>\r\n                            {event.title}\r\n                        </Item.Header>\r\n                        <Item.Description>\r\n                            {/* Created by {event.host?.displayName} */}\r\n                            <Link to={`profiles/${event.hostUsername}`}>{event.host?.displayName}</Link>\r\n                        </Item.Description>\r\n                        {event.isHost && (\r\n                            <Item.Description>\r\n                                <Label basic color='purple'>\r\n                                    You are hosting this event\r\n                                </Label>\r\n                            </Item.Description>\r\n                        )}\r\n                       {!event.isHost && event.isGoing &&(\r\n                            <Item.Description>\r\n                                <Label basic color='green'>\r\n                                    You are interested in this event\r\n                                </Label>\r\n                            </Item.Description>\r\n                        )}\r\n                    </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Grid>\r\n                        <Grid.Column width='6'>\r\n                            <Icon name='clock'/> {format(event.date!,'dd MMM yyy h:mm aa') }\r\n                        </Grid.Column>\r\n           \r\n                        <Grid.Column width='6'>\r\n                            <Icon name='map marker'/> {event.region}\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <EventListItemInterestee interestees={event.interestees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {event.description}\r\n                </span>\r\n                <Button as={Link} to={`/events/${event.id}`} color='teal' floated='right' content='View'></Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header, Item } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport EventListItem from \"./EventListItem\";\r\n\r\n\r\nexport default observer(function EventsList(){\r\n\r\n    const {eventStore} = useStore();\r\n    const {groupedEvents} = eventStore;\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n           {groupedEvents.map((e)=>(\r\n               <Fragment key={e[0]}>\r\n                   <Header sub color='teal'>\r\n                       {e[0]}\r\n                   </Header>\r\n                 \r\n            <Item.Group divided>\r\n                {e[1].map(event =>\r\n                    (\r\n                        <EventListItem key={event.id} event={event}/>\r\n    ))}\r\n            </Item.Group>\r\n      \r\n               </Fragment>\r\n           ))}\r\n        </>\r\n       \r\n\r\n    )\r\n}\r\n)\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function EventListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {Grid, Loader } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../App/Layout/LoadingComponent\";\r\nimport { PagingParams } from \"../../../App/Models/Pagination\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport EventFilter from \"./EventFilter\";\r\nimport EventsList from \"./EventsList\";\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport EventListItemPlaceholder from \"./eventListItemPlaceholder\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default observer(function EventDashboard(){\r\n        const{eventStore} = useStore();\r\n        const {loadEvents, eventsRegistry, setPagingParams, pagination} = eventStore;\r\n        const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n        function handleLoadingNext(){\r\n            setLoadingNext(true);\r\n            setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n            loadEvents().then(() => setLoadingNext(false));\r\n        }\r\n\r\n        useEffect(()=>{\r\n         if(eventsRegistry.size <= 1)  loadEvents();\r\n        }, [eventStore, loadEvents, eventsRegistry.size])\r\n      \r\n        \r\n    return (\r\n\r\n       \r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                {eventStore.loadingInitial && ! loadingNext ? (\r\n                    <>\r\n                      <EventListItemPlaceholder/>\r\n                      <EventListItemPlaceholder/>\r\n                    </>\r\n                ) : \r\n                <InfiniteScroll\r\n                pageStart={0}\r\n                loadMore={handleLoadingNext}\r\n                hasMore={!loadingNext && !! pagination && pagination.currentPage < pagination.totalPages}\r\n                initialLoad={false}>\r\n                    <EventsList/>\r\n                </InfiniteScroll>\r\n                }     \r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n               <h2>Events filter</h2>\r\n                <EventFilter/>\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n} )  ","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    type?: string,\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextInput(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}    \r\n        </Form.Field>\r\n\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../App/Common/Form/MyTextInput';\r\nimport { useStore } from '../../App/Stores/store';\r\n\r\n\r\nexport default observer( function LoginForm(){\r\n\r\n    const {userStore} = useStore()\r\n    return (\r\n        <Formik\r\n        initialValues={{username : '', password: '',error:null}}\r\n        onSubmit={(values, {setErrors}) => userStore.login(values).catch(err => setErrors({error: \"Invalid email or username\" }))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to events!' color='teal'/>\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error'\r\n                      render={()=> <Label style={{marginBottom: '10px'}} color='red' basic content={errors.error} />}\r\n                      />\r\n                    <Button loading={isSubmitting} positive content=\"Login\" type='submit' fluid />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n}\r\n)","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    errors: any;\r\n}\r\nexport default function ValidationErrors({errors}: Props){\r\n    return (\r\n        <Message error>\r\n            {errors &&(\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any)=>(\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../App/Common/Form/MyTextInput';\r\nimport { useStore } from '../../App/Stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\n\r\nexport default observer( function RegisterForm(){\r\n\r\n    const {userStore} = useStore()\r\n    return (\r\n        <Formik\r\n        initialValues={{displayName: '', email:'' ,username : '', password: '',error:null}}\r\n        onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => setErrors({error }))}\r\n        validationSchema={Yup.object({\r\n            displayName: Yup.string().required(),\r\n            username: Yup.string().required(),\r\n            email: Yup.string().required().email(),\r\n            password: Yup.string().required(),\r\n        })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid , dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to events!' color='teal'/>\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='displayName' placeholder='Dispalyname' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error'\r\n                      render={()=> <ValidationErrors  errors={errors.error}/>}\r\n                      />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content=\"Register\" type='submit' fluid />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Grid, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport LoginForm from \"../Users/LoginForm\";\r\nimport RegisterForm from \"../Users/RegisterForm\";\r\n\r\nexport default observer( function HomePage(){\r\n\r\n    const {userStore, modalStore} = useStore()\r\n\r\n    return (\r\n       <Segment textAlign='center' vertical className=\"mainHeader\">\r\n           {/* <Container> */}\r\n              <Grid >\r\n                  <Grid.Column width={'5'} >\r\n                      <img  alt='counting stars img'  src='/assets/counting-stars.svg'></img>\r\n                  </Grid.Column>\r\n                  <Grid.Column width={'6'} >\r\n                      <Header as='h1' content='Reach for the sky'/>\r\n                      <Header as='h2' style={{color: 'GrayText'}}>Join us so you can stay up to date and never miss an event</Header>\r\n                      \r\n                      {userStore.isLoggedIn ? (\r\n                          <>\r\n                          <Header as='h2' style={{color: 'GrayText'}}></Header>\r\n                          <Button style={{marginTop: '2em'}} as={Link} to='/events' size='massive' color='blue'>Go to events</Button>\r\n                          </>\r\n                      ):(\r\n                          <>\r\n                        <Button style={{marginTop: '2em'}} onClick={() => modalStore.openModal(<LoginForm />)} to='/login' size='massive' color='blue'>Login</Button>\r\n                        <Button style={{marginTop: '2em'}} onClick={() => modalStore.openModal(<RegisterForm/>)} to='/login' size='massive' color='blue'>Register</Button>\r\n                        </>\r\n                      )}\r\n                      \r\n                  </Grid.Column>\r\n                  <Grid.Column width={'5'} >\r\n                      <img   alt='space img'  src='/assets/space.svg'></img>\r\n                  </Grid.Column>\r\n              </Grid>\r\n           {/* </Container> */}\r\n\r\n       </Segment>\r\n    )\r\n}\r\n)","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface IProps{\r\n    inverted?: boolean,\r\n    content?: string,\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true, content = \"Loading...\"}: IProps){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n           <Loader content={content}/>\r\n        </Dimmer>\r\n\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    type?: string,\r\n    rows: number,\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextArea(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}    \r\n        </Form.Field>\r\n\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    options: any,\r\n    label?: string\r\n}\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n            clearable\r\n            options={props.options}\r\n            value={field.value || null}\r\n            onChange={(e,d)=>helpers.setValue(d.value)}\r\n            onBlur={()=>helpers.setTouched(true)}\r\n            placeholder={props.placeholder}\r\n             />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}    \r\n        </Form.Field>\r\n\r\n    )\r\n}","export const categoryOption = [\r\n    {text: 'Meteor', value:'meteor'},\r\n    {text: 'Solar and lunar eclipses', value:'solar and lunar eclipses'},\r\n    {text: 'Comet flybys', value:'comet flybys'},\r\n    {text: 'Solstices', value:'solstices'}\r\n];","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from \"react-datepicker\";\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n            {...field}\r\n            {...props}\r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={value=>helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}    \r\n        </Form.Field>\r\n\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../App/Layout/LoadingComponent\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../App/Common/Form/MyTextInput\";\r\nimport MyTextArea from \"../../../App/Common/Form/MyTextArea\";\r\nimport MySelectInput from \"../../../App/Common/Form/MySelectInput\";\r\nimport { categoryOption } from \"../../../App/Common/Options/CategoryOptions\";\r\nimport MyDateInput from \"../../../App/Common/Form/MyDateInput\";\r\nimport { EventFormValues } from \"../../../App/Models/Event\";\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n\r\n\r\n\r\n\r\nexport default observer( function EventForm(){\r\n\r\n    const {eventStore} = useStore();\r\n    const{updateEvent, loading,createEvent, loadEventById}= eventStore;\r\n    const {id} = useParams<{id: string}>();\r\n    const history = useHistory();\r\n    const [event, setEvent] = useState<EventFormValues>(new EventFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('the title is required'),\r\n        description: Yup.string().required('The description is required'),\r\n        categories: Yup.string().required('the category is required').nullable(),\r\n        date: Yup.string().required('The date is required'),\r\n        region: Yup.string().required('The region is required')\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if (id) {\r\n            loadEventById(id).then(event => setEvent(new EventFormValues(event)))\r\n        }\r\n    },[id, loadEventById])\r\n\r\n    // const initialState = eventStore.selectedEvent ?? {\r\n    //     id:'',\r\n    //     title:'',\r\n    //     description:'',\r\n    //     date:'',\r\n    //     region:'',\r\n    //     categories: ''\r\n    // }\r\n\r\n\r\n    function handleFormSubmit(event: EventFormValues){\r\n        console.log(event);\r\n        if (!event.id) {\r\n            // let newEvent = {\r\n            //     ...event,\r\n            //     id : uuid()\r\n            // }\r\n            let newEvent = event;\r\n            newEvent.id = uuid();\r\n            createEvent(newEvent).then(()=> history.push(`/events/${event.id}`));\r\n        } else {\r\n            updateEvent(event).then(()=> history.push(`/events/${event.id}`));\r\n        }\r\n    }\r\n\r\n    // function handleInputChange(Event : ChangeEvent<HTMLInputElement | HTMLTextAreaElement>){\r\n    //     const {name, value} = Event.target;\r\n    //     setEvent({...event,[name]: value});\r\n    // }\r\n\r\n    if (loading) {\r\n        return <LoadingComponent content='loading event...'/>\r\n    }\r\n\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Event details' subheader color='teal'/>\r\n            <Formik enableReinitialize\r\n             initialValues={event}\r\n              onSubmit={values => handleFormSubmit(values)}\r\n              validationSchema={validationSchema}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty})=>\r\n                              <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                                  <MyTextInput placeholder='Title' name='title'/>\r\n                                  <MyTextArea rows={3} placeholder='Description' name='description'/>\r\n                                  <MySelectInput placeholder='Category' name='categories' options={categoryOption}/>\r\n                                  <MyDateInput \r\n                                  placeholderText='Date'\r\n                                  name='date'\r\n                                  showTimeSelect\r\n                                  timeCaption='time'\r\n                                  dateFormat='MMMM d, yyy h:mm aa'\r\n                                  />\r\n                                   <Header content='Location details' subheader color='teal'/>\r\n                                  <MyTextInput placeholder='Region'  name='region'/>\r\n              \r\n                                  <Button\r\n                                   disabled={isSubmitting || !dirty || !isValid}\r\n                                   loading={isSubmitting}\r\n                                   floated='right' positive type='submit' content='Submit'\r\n                                   \r\n                                  />\r\n                                  <Button as={Link} to='/events' floated='right'  type='submit' content='Cancel' />\r\n                          </Form>\r\n                }\r\n            </Formik>\r\n        </Segment>\r\n\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../App/Stores/store';\r\nimport * as Yup from 'yup';\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow'\r\n\r\ninterface Props {\r\n    eventId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ eventId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n    useEffect(() => {\r\n        if (eventId) {\r\n            commentStore.createHubConnection(eventId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComment()\r\n        }\r\n    }, [commentStore, eventId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                        onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: \"\" }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}                   >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className=\"ui form\">\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div>\r\n                                            <Loader active={isSubmitting}/>\r\n                                                <textarea\r\n                                                    placeholder='Enter to submit your comment, Enter + shift for new line'\r\n                                                    rows={2}\r\n                                                    {...props.field}\r\n                                                    onKeyPress={e => {\r\n                                                        if (e.key === 'Enter' && e.shiftKey) {\r\n                                                            return;\r\n                                                        }\r\n                                                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                            e.preventDefault();\r\n                                                            isValid && handleSubmit();\r\n                                                        }\r\n                                                    }}\r\n                                                />                                    \r\n                                        </div>\r\n                                        )}\r\n                                </Field>\r\n                            </Form>\r\n                              )}\r\n                          </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(new Date(comment.createdAt))}</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                        ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { IEvent } from '../../../App/Models/Event';\r\nimport { useStore } from '../../../App/Stores/store';\r\n\r\nconst eventImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst eventImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    event: IEvent;\r\n}\r\n\r\nexport default observer (function EventDetailedHeader({event}: Props) {\r\n    const {eventStore : {updateInterest, loading, cancelEventToggel}} = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {event.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} ribbon color='red' content='Cancelled'/>\r\n                }\r\n                <Image src={`/assets/categoryImages/${event.categories}.jpg`} fluid style={eventImageStyle}/>\r\n                <Segment style={eventImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={event.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(event.date!, 'dd MMM yyyy') }</p>\r\n                                <p>\r\n                                    Added by <strong><Link to={`/profile/${event.host?.username}`}>{event.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {event.isHost ? (\r\n                    <>\r\n                    <Button color={event.isCancelled ? 'red' : 'green'}\r\n                            floated='left'\r\n                            basic\r\n                            content={event.isCancelled ? 'Reactivate event' : 'Cancel event'}\r\n                            onClick={cancelEventToggel}\r\n                            loading={loading}\r\n                    />\r\n                      <Button as={Link}\r\n                              to={`/manage/${event.id}`}\r\n                              color='orange'\r\n                              floated='right'\r\n                              disabled={event.isCancelled}>\r\n                          Manage Event\r\n                      </Button>\r\n                    </>\r\n                ) : event.isGoing ? (\r\n                    <Button loading={loading} onClick={updateInterest}>Cancel </Button>\r\n                ) : (\r\n                    <Button disabled={event.isCancelled} loading={loading} onClick={updateInterest} color='teal'>Join Event</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { IEvent } from '../../../App/Models/Event';\r\n\r\n\r\ninterface Props {\r\n    event: IEvent\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({event}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{event.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(event.date!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{event.region}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { IEvent } from '../../../App/Models/Event'\r\n\r\ninterface Props {\r\n    event: IEvent;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({event : {interestees, host}}: Props) {\r\n    if(!interestees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {interestees.length} {interestees.length === 1 ? 'Person' : 'People'} interested\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {interestees.map(interestee => (\r\n                        <Item key={interestee.username} style={{ position: 'relative' }}>\r\n                            {interestee.username === host?.username && \r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>}\r\n                        <Image size='tiny' src={interestee.image || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${interestee.username}`}>{interestee.displayName}</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../App/Layout/LoadingComponent\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport EventDetailedChat from \"./EventDetailedChat\";\r\nimport EventDetailedHeader from \"./EventDetailedHeader\";\r\nimport EventDetailedInfo from \"./EventDetailedInfo\";\r\nimport EventDetailedSideBar from \"./EventDetailedSideBar\";\r\n\r\n\r\nexport default observer(function ActivityDetails(){\r\n  const {eventStore} = useStore();\r\n  const {selectedEvent: event, loadEventById, loadingInitial, clearSelectedEvent} = eventStore;\r\n  const {id} = useParams<{id: string}>();\r\n\r\n  useEffect(()=> {\r\n    if (id) loadEventById(id);\r\n    return () => clearSelectedEvent();\r\n  },[id, loadEventById, clearSelectedEvent]);\r\n\r\n  if(!event || loadingInitial) return <LoadingComponent/>;\r\n    return (\r\n       <Grid>\r\n         <Grid.Column width={10}>\r\n           <EventDetailedHeader event={event}/>\r\n                <EventDetailedInfo event={event} />\r\n                <EventDetailedChat eventId={event.id} />\r\n         </Grid.Column>\r\n         <Grid.Column width={6}>\r\n           <EventDetailedSideBar event={event}/>\r\n         </Grid.Column>\r\n       </Grid>\r\n    )\r\n}\r\n)","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'events/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'events', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n              <ValidationErrors errors={errors}></ValidationErrors>\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Segment, Image, Grid } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound(){\r\n    return (\r\n        <Segment >\r\n            <Image  size='large' centered  src='/assets/404.svg'></Image>\r\n            <Header size='medium' textAlign='center' content='Oops, we have looked and could not found this'/>\r\n            <Grid>\r\n               <Grid.Column textAlign=\"center\">\r\n                  <Button as={Link} style={{position: 'center'}} to='events'  primary content='Return to events page'/>\r\n               </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\nexport default observer( function ServerError(){\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as={'h1'}>Server error</Header>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n              <Segment>\r\n                  <Header as='h4' content='stack trace' color='teal'/>\r\n                  <code style={{marginTop: '10px'}}>\r\n                      {commonStore.error.details}\r\n                  </code>\r\n              </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../Stores/store\";\r\n\r\nexport default observer(function(){\r\n    \r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={()=>modalStore.closeModal()} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport * as Yup from 'yup';\r\nimport MyTextArea from \"../../App/Common/Form/MyTextArea\";\r\nimport MyTextInput from \"../../App/Common/Form/MyTextInput\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\ninterface Props {\r\nsetEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\nconst {profileStore: {profile, updateProfile}} = useStore();\r\nreturn (\r\n<Formik\r\ninitialValues={{displayName: profile?.displayName, bio:\r\nprofile?.bio}}\r\nonSubmit={values => {\r\nupdateProfile(values).then(() => {\r\nsetEditMode(false);\r\n})\r\n}}\r\nvalidationSchema={Yup.object({\r\ndisplayName: Yup.string().required()\r\n})}\r\n>\r\n{({isSubmitting, isValid, dirty}) => (\r\n<Form className='ui form'>\r\n<MyTextInput placeholder='Display Name'\r\nname='displayName' />\r\n<MyTextArea rows={3} placeholder='Add your bio'\r\nname='bio' />\r\n<Button\r\npositive\r\ntype='submit'\r\nloading={isSubmitting}\r\ncontent='Update profile'\r\nfloated='right'\r\ndisabled={!isValid || !dirty}\r\n/>\r\n</Form>\r\n)}\r\n</Formik>\r\n)\r\n})","import React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../App/Stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={profile?.displayName} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../App/Stores/store';\r\nimport { UserEvent } from '../../App/Models/Profile';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'host' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadAllUserEvents,\r\n        loadUserEvents,\r\n        profile,\r\n        loadingEvents,\r\n        userEvents\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadAllUserEvents(profile!.username);\r\n    }, [loadAllUserEvents, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserEvents(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingEvents}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userEvents.map((event: UserEvent) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/events/${event.id}`}\r\n                                key={event.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${event.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{event.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(event.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(event.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper ) => void;\r\n}\r\n\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n        src={imagePreview}\r\n        style={{height: 200, width: '100%'}}\r\n        initialAspectRatio={1}\r\n        aspectRatio={1}\r\n        preview='.img-preview'\r\n        guides={false}\r\n        viewMode={1}\r\n        autoCropArea={1}\r\n        background={false}\r\n        onInitialized={cropper => setCropper(cropper)}/>\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green',\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n      setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n      })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon size='huge' name='upload'/>\r\n      <Header content='Drop file here'/>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, ButtonGroup, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props{\r\n    uploadPhoto: (file: Blob) => void;\r\n    uploading: boolean\r\n}\r\n\r\nexport default function PhotoUploadWidget({uploadPhoto, uploading}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n    \r\n    function onCrop() {\r\n        if(cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header subheader color='teal' content='Step 1 - Add Photo'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}></Grid.Column>\r\n            <Grid.Column width={4}>\r\n                <Header subheader color='teal' content='Step 2 - Resize Photo'/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}></Grid.Column>\r\n            <Grid.Column width={4}>\r\n                <Header subheader color='teal' content='Step 3 - Preview and upload Photo'/>\r\n                {files && files.length > 0 &&\r\n                <>\r\n                   <div className='img-preview' style={{minHeight : 200, overflow : 'hidden'}}></div>\r\n                   <ButtonGroup widths={2}>\r\n                       <Button loading={uploading} onClick={onCrop} positive icon='check'/>\r\n                       <Button disabled={uploading} onClick={() => setFiles([])} icon='close'/>\r\n                   </ButtonGroup>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button, ButtonGroup} from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../App/Common/ImageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../App/Models/Profile\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false))\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                   <Header floated='left' icon='image' content='Photos'/>\r\n                   {isCurrentUser && (\r\n                       <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} onClick={() => setAddPhotoMode(!addPhotoMode)}/>\r\n                   )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} uploading={uploading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                        {profile.photos?.map(photo => (\r\n                            <Card key={photo.id}>\r\n                            <Image src={photo.url}/>\r\n                            {isCurrentUser && (\r\n                                <ButtonGroup fluid widths={2}>\r\n                                    <Button basic color='green' content='Main' name={'main' + photo.id} disabled={photo.isMain}\r\n                                    loading={target === 'main' + photo.id && loading}\r\n                                    onClick={e => handleSetMainPhoto(photo, e)}/>\r\n                                    <Button basic color='red' icon='trash'\r\n                                    loading={target === photo.id && loading}\r\n                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                    disabled= {photo.isMain}\r\n                                    name={photo.id}\r\n                                    /> \r\n                                </ButtonGroup>\r\n                            )}\r\n                        </Card>\r\n                        ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/Profile\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileEvents from \"./ProfileEvents\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}: Props){\r\n    const panes = [\r\n        {menuItem: \"About\", render: () => <ProfileAbout/>},\r\n        {menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile}/>},\r\n        {menuItem: \"Events\", render: () => <ProfileEvents/>},\r\n        {menuItem: \"Followers\", render: () => <Tab.Pane>Followers Content</Tab.Pane>},\r\n        {menuItem: \"Following\", render: () => <Tab.Pane>Following Content</Tab.Pane>}   \r\n    ];\r\n    return (\r\n        <Tab\r\n           menu={{fluid: true, vertical: true}}\r\n           menuPosition='right'\r\n           panes={panes}\r\n        />\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/Profile\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfileHeader({profile}: Props){\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || \"/assets/user.png\"}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group>\r\n                        <Statistic label='Followers' value='5' />\r\n                        <Statistic label='Following' value='42' />\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    <Reveal animated='move'>\r\n                        <Reveal.Content visible style={{width: '100%'}}>\r\n                           <Button fluid color='purple' content='Following'/>\r\n                        </Reveal.Content>\r\n                        <Reveal.Content hidden style={{width: '100%'}}>\r\n                           <Button basic fluid color={true ? 'red' : 'green'} content={true ? 'Unfollow' : 'Follow'}/>\r\n                        </Reveal.Content>\r\n                    </Reveal>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../App/Layout/LoadingComponent\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer( function ProfilePage(){\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore: {loadProfile, profile, loadingProfile}} = useStore();\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n    }, [loadProfile, username])\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading componnent'/>\r\n    return (\r\n       <Grid>\r\n           <Grid.Column width={16}>\r\n               {profile &&\r\n               <>\r\n                <ProfileHeader profile={profile}/>    \r\n                <ProfileContent profile={profile}/>\r\n               </>}\r\n           </Grid.Column>\r\n       </Grid>\r\n    )\r\n}\r\n)","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../Stores/store\";\r\n\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport NavBar from './NavBar';\r\nimport EventDashboard from '../../Features/Events/Dashboard/EventDashboard';\r\nimport {  Container } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../Features/Home/HomePage';\r\nimport EventForm from '../../Features/Events/Form/EventForm';\r\nimport EventDetails from '../../Features/Events/Details/EventDetails';\r\nimport TestErrors from '../../Features/errors/TestErrors';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../Features/errors/NotFound';\r\nimport ServerError from '../../Features/errors/ServerError';\r\nimport { useStore } from '../Stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModelContainer from '../Common/Modals/ModelContainer';\r\nimport ProfilePage from '../../Features/Profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n  useEffect(() => {\r\n    if(commonStore.token){\r\n      userStore.getUser().finally(()=> commonStore.setAppLoaded())\r\n    } else {\r\n      commonStore.setAppLoaded()\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading App ...'/>\r\n\r\n  return (\r\n    \r\n    <>\r\n    <ToastContainer position=\"bottom-right\" hideProgressBar></ToastContainer>\r\n    <ModelContainer/>\r\n    <Route exact path='/' component={HomePage} />\r\n    <Route\r\n    path={'/(.+)'}\r\n    render={()=>(\r\n      <>      <NavBar/>\r\n      <div style={{marginTop: '5em'}}></div>\r\n      <Container>\r\n      <Switch>\r\n      <PrivateRoute exact path='/events' component={EventDashboard} />\r\n      <PrivateRoute path='/events/:id' component={EventDetails} />\r\n      <PrivateRoute key={location.key} path={['/createEvent','/manage/:id']} component={EventForm} />\r\n      <PrivateRoute path='/Profiles/:username' component={ProfilePage}/>\r\n      <PrivateRoute path='/errors' component={TestErrors}/>\r\n      <Route path='/server-error' component={ServerError}/>\r\n      <Route component={NotFound}/>\r\n      </Switch>\r\n\r\n      </Container></>\r\n  )} \r\n    />\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App) ;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './App/Layout/index.css';\r\nimport App from './App/Layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { eventContext, store } from './App/Stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './App/Layout/ScrollToTop';\r\n\r\nexport const History = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <eventContext.Provider value={store}>\r\n      <Router history={History}>\r\n        <ScrollToTop/>\r\n        <App />\r\n      </Router>\r\n    </eventContext.Provider>,\r\n  \r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}