{"version":3,"sources":["App/Models/Pagination.ts","App/Api/agent.ts","App/Models/Event.ts","App/Models/Profile.ts","App/Stores/eventStore.ts","App/Stores/ModalStore.ts","App/Stores/ProfileStore.ts","App/Stores/UserStore.ts","App/Stores/store.ts","App/Stores/CommonStore.ts","App/Stores/CommentStore.ts","App/Layout/NavBar.tsx","Features/Events/Dashboard/EventFilter.tsx","Features/Profiles/ProfileCard.tsx","Features/Events/Dashboard/EventListItemInterestee.tsx","Features/Events/Dashboard/EventListItem.tsx","Features/Events/Dashboard/EventsList.tsx","Features/Events/Dashboard/eventListItemPlaceholder.tsx","Features/Events/Dashboard/EventDashboard.tsx","App/Common/Form/MyTextInput.tsx","Features/Users/LoginForm.tsx","Features/errors/ValidationErrors.tsx","Features/Users/RegisterForm.tsx","Features/Home/HomePage.tsx","App/Layout/LoadingComponent.tsx","App/Common/Form/MyTextArea.tsx","App/Common/Form/MySelectInput.tsx","App/Common/Options/CategoryOptions.ts","App/Common/Form/MyDateInput.tsx","Features/Events/Form/EventForm.tsx","Features/Events/Details/EventDetailedChat.tsx","Features/Events/Details/EventDetailedHeader.tsx","Features/Events/Details/EventDetailedInfo.tsx","Features/Events/Details/EventDetailedSideBar.tsx","Features/Events/Details/EventDetails.tsx","Features/errors/TestErrors.tsx","Features/errors/NotFound.tsx","Features/errors/ServerError.tsx","App/Common/Modals/ModelContainer.tsx","Features/Profiles/ProfileEditForm.tsx","Features/Profiles/ProfileAbout.tsx","Features/Profiles/ProfileEvents.tsx","App/Common/ImageUpload/PhotoWidgetCropper.tsx","App/Common/ImageUpload/PhotoWidgetDropzone.tsx","App/Common/ImageUpload/PhotoUploadWidget.tsx","Features/Profiles/ProfilePhotos.tsx","Features/Profiles/ProfileContent.tsx","Features/Profiles/ProfileHeader.tsx","Features/Profiles/ProfilePage.tsx","App/Layout/PrivateRoute.tsx","App/Layout/App.tsx","reportWebVitals.ts","App/Layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","pagination","data","this","PagingParams","pageNumber","sizeNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","History","push","console","log","modelStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","events","list","params","details","id","create","event","update","interest","accounts","current","login","user","register","fbLogin","accessToken","refreshToken","profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","listEvents","predicate","listAllEvents","updateProfile","profile","IEvent","init","Object","assign","EventFormValues","undefined","title","categories","description","date","region","Profile","userName","displayName","image","EventStore","eventsRegistry","Map","selectedEvent","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadEvents","setLoadingInitial","axiosParams","setEvent","runInAction","setPagination","loadEventById","getEvent","state","createEvent","interestee","newEvent","hostUsername","interestees","updateEvent","updatedEvent","deleteEvent","updateInterest","isGoing","filter","cancelEventToggel","isCancelled","clearSelectedEvent","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","eventsByDate","reduce","format","some","isHost","host","find","x","Date","ModalStore","modal","open","content","ProfileStore","loadingProfile","uploading","userEvents","loadingEvents","loadProfile","photo","photos","isMain","setImage","p","loadUserEvents","loadAllUserEvents","setDisplayName","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","getfacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearInterval","eventStore","getItem","appLoaded","ServerError","setAppLoaded","setItem","profileStore","commentStore","comments","hubConnection","createHubConnection","eventId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComment","addComment","invoke","eventContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","exact","as","NavLink","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","Header","attached","color","Icon","active","has","onChange","Card","Content","Description","str","length","substring","truncate","bio","extra","List","horizontal","map","Popup","hoverable","trigger","circular","Segment","Group","Label","textAlign","marginBottom","basic","Grid","Column","secondary","clearing","floated","groupedEvents","e","sub","divided","EventListItemPlaceholder","Placeholder","fluid","marginTop","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","err","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","email","validationSchema","Yup","required","isValid","dirty","isLoggedIn","openModal","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOption","MyDateInput","selected","useParams","history","useHistory","nullable","subheader","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","preventDefault","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","eventImageStyle","eventImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","Extra","EventDetailedInfo","EventDetailedChat","EventDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","centered","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","category","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderColor","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","ButtonGroup","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileEvents","menuPosition","Statistic","Reveal","animated","visible","hidden","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","ModelContainer","path","HomePage","EventDashboard","EventDetails","EventForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.280afec6.chunk.js","sourcesContent":["export default interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(pagination: Pagination, data : T) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n        \r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, sizeNumber = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = sizeNumber;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { History } from \"../..\";\r\nimport { EventFormValues, IEvent } from \"../Models/Event\";\r\nimport { PaginatedResult } from \"../Models/Pagination\";\r\nimport { Photo, Profile, UserEvent } from \"../Models/Profile\";\r\nimport { User, UserFormValues } from \"../Models/User\";\r\nimport { store } from \"../Stores/store\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n        return config\r\n    }else{\r\n        return config;\r\n    }\r\n})\r\n\r\naxios.interceptors.response.use(async response=>{\r\n        if(process.env.NODE_ENV === \"development\") await sleep(1000);\r\n        const pagination = response.headers[\"pagination\"];\r\n        if(pagination) {\r\n            response.data = new PaginatedResult(JSON.parse(pagination), response.data);\r\n            return response as AxiosResponse<PaginatedResult<any>>\r\n        }\r\n        return response;\r\n},(error: AxiosError)=>{\r\n    const {data, status,config, headers} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n\r\n            if(config.method === \"get\" && data.errors.hasOwnProperty('id') ){\r\n                History.push('/NotFound');\r\n            }\r\n            if (data.errors) \r\n            {\r\n                console.log(data.errors);\r\n                const modelStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if (data.errors[key]) {\r\n                        modelStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat();\r\n            } \r\n            break;\r\n        case 401:\r\n            if(status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error(\"Session expired - please login again\"); \r\n            }\r\n                     \r\n            break;\r\n        case 404:\r\n             History.push('/NotFound')\r\n             break;\r\n         case 500:\r\n            console.log(data);\r\n            store.commonStore.setServerError(data);\r\n            History.push('/server-error')       \r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst sleep = (delay: number)=>{\r\n    return new Promise((resolve)=>{\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\nconst requests = {\r\n    get:<T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post:<T> (url: string, body: {}) => axios.post<T>(url,body).then(responseBody),\r\n    put:<T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete:<T> (url: string) => axios.delete<T>(url).then(responseBody)\r\n\r\n}\r\n\r\nconst events = {\r\n    list: (params: URLSearchParams)=> axios.get<PaginatedResult<IEvent[]>>('/Events', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<IEvent>(`/Events/${id}`),\r\n    create: (event: EventFormValues) => requests.post<void>(`/Events`,event),\r\n    update: (event: EventFormValues) => requests.put<void>(`/Events/${event.id}`, event),\r\n    delete: (id: string) => requests.delete<void>(`/Events/${id}`),\r\n    interest: (id: string) => requests.post<void>(`/Events/${id}/interest`, {})\r\n}\r\n\r\nconst accounts = {\r\n    current: () => requests.get<User>(`/account`),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {})\r\n}\r\n\r\nconst profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto : (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setmain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    listEvents: (username: string, predicate: string) => requests.get<UserEvent[]>(`/profiles/${username}/events?predicate=${predicate}`),\r\n    listAllEvents: (username: string) => requests.get<UserEvent[]>(`/profiles/${username}/events`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile)\r\n}\r\n\r\nconst agent = {\r\n    events,\r\n    accounts,\r\n    profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./Profile\";\r\n\r\nexport interface IEvent {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    date: Date | null;\r\n    region: string;\r\n    categories: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: Boolean;\r\n    host?: Profile;\r\n    interestees: Profile[];\r\n}\r\n\r\nexport class IEvent implements IEvent {\r\n    constructor(init?: EventFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n} \r\n\r\nexport class EventFormValues {\r\n    id? : string = undefined;\r\n    title: string = '';\r\n    categories: string = '';\r\n    description : string = '';\r\n    date: Date | null = null;\r\n    region: string = '';\r\n    \r\n    constructor(event?: EventFormValues) {\r\n        if(event) {\r\n            this.id = event.id;\r\n            this.title = event.title;\r\n            this.categories = event.categories;\r\n            this.date = event.date;\r\n            this.description = event.description;\r\n            this.region = event.region;\r\n        }\r\n    }\r\n}","import { User } from \"./User\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[]\r\n}\r\n\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.userName;\r\n        this.displayName = user.userName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserEvent {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../Api/agent\";\r\nimport { EventFormValues, IEvent } from \"../Models/Event\";\r\nimport Pagination, { PagingParams } from \"../Models/Pagination\";\r\nimport { Profile } from \"../Models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class EventStore{\r\n    // events: IEvent[]= [];\r\n    eventsRegistry = new Map<string, IEvent>();\r\n    selectedEvent : IEvent | undefined = undefined;\r\n    editMode = false;\r\n    loading =false;\r\n    loadingInitial= true;\r\n    pagination: Pagination | null = null;\r\n    pagingParams: PagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true)\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n\r\n        reaction(() => this.predicate.keys(),\r\n        () => {\r\n          this.pagingParams = new PagingParams();\r\n          console.log(this.pagingParams)\r\n          this.eventsRegistry.clear();\r\n          this.loadEvents();\r\n        })\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n      this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string , value: string | Date) => {\r\n      const resetPredicate = () => {\r\n        this.predicate.forEach((value, key) => {\r\n          // console.log(key);\r\n          if(key !== 'startAt') this.predicate.delete(key);\r\n        })\r\n      }\r\n      switch(predicate) {\r\n        case 'all':\r\n          resetPredicate();\r\n          this.predicate.set('all' , true);\r\n          break;\r\n        case 'isGoing':\r\n          resetPredicate();\r\n          this.predicate.set('isGoing', true);\r\n          break;\r\n        case 'isHost':\r\n          resetPredicate();\r\n          this.predicate.set('isHost', true);\r\n          break;\r\n        case 'startDate':\r\n          this.predicate.delete('startAt');\r\n          this.predicate.set('startAt', value);\r\n\r\n      }\r\n    }\r\n\r\n    get axiosParams() {\r\n      const params = new URLSearchParams();\r\n      params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n      params.append('pageSize', this.pagingParams.pageSize.toString());\r\n      this.predicate.forEach((value, key) => {\r\n        if(key === \"startAt\") {\r\n          console.log(value);\r\n          params.append(key, (value as Date).toISOString());\r\n        } else {\r\n          params.append(key, value);\r\n        }\r\n      })\r\n      return params\r\n    }\r\n\r\n    get eventsByDate(){\r\n      return Array.from(this.eventsRegistry.values()).sort((a, b) => \r\n      a.date!.getTime() - a.date!.getTime());\r\n    }\r\n\r\n    get groupedEvents(){\r\n      return Object.entries(\r\n        this.eventsByDate.reduce((events, event)=>{\r\n          const date = format(event.date!, 'dd MMM yyyy') ;\r\n          // events[date] = events[date] ? [...events[date], event] : [event];\r\n          if (!events[date]) {\r\n            events[date] = [event];\r\n            \r\n          }else{\r\n            events[date].push(event);\r\n          }\r\n\r\n          return events\r\n        }, {} as {[Key: string]: IEvent[]})\r\n      )\r\n    }\r\n\r\n    loadEvents = async ()=>{\r\n      this.setLoadingInitial(true);\r\n      try {\r\n        const events = await agent.events.list(this.axiosParams);\r\n\r\n            events.data.forEach(event=> {\r\n                this.setEvent(event);\r\n                // this.events.push(event);\r\n                runInAction(()=>{\r\n                  this.eventsRegistry.set(event.id, event);\r\n                });\r\n              }) ;\r\n              this.setPagination(events.pagination);\r\n              this.setLoadingInitial(false);\r\n\r\n      } catch (error) {\r\n          console.log(error);\r\n          this.setLoadingInitial(false);\r\n      }\r\n    }\r\n\r\n    setPagination(pagination: Pagination) {\r\n      this.pagination = pagination;\r\n    }\r\n\r\n    loadEventById = async (id : string)=>{\r\n      let event = this.getEvent(id);\r\n      if(event){\r\n        this.selectedEvent = event;\r\n        return event;\r\n      } else {\r\n        this.loadingInitial = true;\r\n        try {\r\n          event = await agent.events.details(id);\r\n          this.setEvent(event);\r\n          runInAction(()=>{\r\n            this.selectedEvent =event;\r\n          });\r\n          this.setLoadingInitial(false);\r\n          return event;\r\n          \r\n        } catch (error) {\r\n          console.log(error);\r\n          this.setLoadingInitial(false);\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    private getEvent(id:string){\r\n      return this.eventsRegistry.get(id);\r\n    }\r\n\r\n    private setEvent(event: IEvent){\r\n      const user = store.userStore.user;\r\n      if(user) {\r\n        console.log(user.userName);\r\n        event.isGoing = event.interestees!.some(\r\n          a => a.username === user.userName\r\n        );\r\n        event.isHost = event.hostUsername === user.userName;\r\n        event.host = event.interestees?.find(x => x.username === event.hostUsername)\r\n      }\r\n      event.date = new Date(event.date!);\r\n      this.eventsRegistry.set(event.id, event);\r\n    }\r\n\r\n   setLoadingInitial = (state: boolean)=>{\r\n     this.loadingInitial = state;\r\n   }\r\n\r\n  //  selectEvent = (id: string)=>{\r\n  //   //  this.selectedEvent= this.events.find(a => a.id===id);\r\n  //   this.selectedEvent = this.eventsRegistry.get(id);\r\n  //  }\r\n\r\n  //  cancelSelectedEvent=()=>{\r\n  //     this.selectedEvent= undefined;\r\n  //  }\r\n\r\n  //  openForm = (id?: string)=>{\r\n  //     id ? this.selectEvent(id) : this.cancelSelectedEvent();\r\n  //     this.editMode=true\r\n  //  }\r\n\r\n  //  closeForm=()=>{\r\n  //    this.editMode=false;\r\n  //  }\r\n\r\n   createEvent=async (event: EventFormValues)=>{\r\n     const user = store.userStore.user;\r\n     const interestee = new Profile(user!);\r\n     try {\r\n       await agent.events.create(event);\r\n       const newEvent = new IEvent(event);\r\n       newEvent.hostUsername = user!.userName;\r\n       newEvent.interestees = [interestee];\r\n       this.setEvent(newEvent);\r\n       runInAction(()=>{\r\n        //  this.events.push(event);\r\n        this.selectedEvent = newEvent;\r\n       })\r\n       \r\n     } catch (error) {\r\n       console.log(error);\r\n       runInAction(()=>{\r\n         this.loading=false;\r\n       })\r\n     }\r\n   }\r\n\r\n   updateEvent= async (event: EventFormValues)=>{\r\n     try {\r\n       await agent.events.update(event);\r\n       runInAction(()=>{\r\n         if(event.id) {\r\n           let updatedEvent = {...this.getEvent(event.id), ...event};\r\n           this.eventsRegistry.set(updatedEvent.id!, updatedEvent as IEvent);\r\n           this.selectedEvent=event as IEvent;\r\n         }\r\n        //  this.events=[...this.events.filter(x=>x.id!== event.id), event];\r\n        //  this.events.forEach(element => {\r\n        //    console.log(element);\r\n        //  })   \r\n       })\r\n     } catch (error) {\r\n       console.log(error);\r\n       runInAction(()=>{\r\n         this.loading=false\r\n       })\r\n     }\r\n   }\r\n\r\n   deleteEvent = async (id: string)=>{\r\n     this.loading=true;\r\n     try {\r\n       await agent.events.delete(id);\r\n       runInAction(()=>{\r\n        this.eventsRegistry.delete(id);\r\n        this.loading= false;\r\n       })\r\n\r\n       \r\n     } catch (error) {\r\n       console.log(error);\r\n       runInAction(()=>{\r\n         this.loading= false;\r\n       })\r\n     }\r\n   }\r\n\r\n   updateInterest = async () => {\r\n     const user = store.userStore.user;\r\n     this.loading = true;\r\n     try {\r\n       await agent.events.interest(this.selectedEvent!.id);\r\n       runInAction(() => {\r\n         if (this.selectedEvent?.isGoing) {\r\n           this.selectedEvent.interestees = this.selectedEvent.interestees?.filter(a => a.username !== user?.userName);\r\n           this.selectedEvent.isGoing = false;\r\n         } else {\r\n           const interestee = new Profile(user!);\r\n           this.selectedEvent?.interestees?.push(interestee);\r\n           this.selectedEvent!.isGoing = true;\r\n         }\r\n         this.eventsRegistry.set(this.selectedEvent!.id, this.selectedEvent!);\r\n       })\r\n     } catch (error) {\r\n       console.log(error);\r\n     } finally {\r\n       runInAction(()=> {\r\n         this.loading = false;\r\n       })\r\n     }\r\n   }\r\n\r\n   cancelEventToggel = async () => {\r\n     this.loading = true;\r\n     try {\r\n       await agent.events.interest(this.selectedEvent!.id);\r\n       runInAction(() => {\r\n         this.selectedEvent!.isCancelled = !this.selectedEvent?.isCancelled;\r\n         this.eventsRegistry.set(this.selectedEvent!.id, this.selectedEvent!);\r\n       })\r\n     } catch (error) {\r\n       console.log(error);\r\n     } finally {\r\n       runInAction(() => {\r\n         this.loading = false;\r\n       })\r\n     }\r\n   }\r\n\r\n   clearSelectedEvent = () => {\r\n     this.selectedEvent = undefined;\r\n   }\r\n\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    body: null | JSX.Element\r\n}\r\n\r\nexport default class ModalStore {\r\n    \r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal(content: JSX.Element){\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n   closeModal(){\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../Api/agent\";\r\nimport { Photo, Profile, UserEvent } from \"../Models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile: boolean = false;\r\n    uploading: boolean = false;\r\n    loading: boolean = false;\r\n    userEvents: UserEvent[] = [];\r\n    loadingEvents: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                    this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.uploading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false; \r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    loadUserEvents = async (username: string, predicate?: string) => {\r\n        this.loadingEvents = true;\r\n        try {\r\n            const events = await agent.profiles.listEvents(username, predicate!);\r\n            runInAction(()=> {\r\n                this.userEvents = events;\r\n                this.loadingEvents = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingEvents = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadAllUserEvents = async (username: string) => {\r\n        this.loadingEvents = true;\r\n        try {\r\n            const events = await agent.profiles.listAllEvents(username)\r\n            runInAction(()=> {\r\n                this.userEvents = events;\r\n                this.loadingEvents = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingEvents = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName)\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { History } from \"../..\";\r\nimport agent from \"../Api/agent\";\r\nimport { User, UserFormValues } from \"../Models/User\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.accounts.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(()=>{\r\n                this.user = user;\r\n            });\r\n            console.log(user);\r\n            History.push('/events');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw (error);\r\n        }\r\n    }\r\n\r\n    logout = async () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user =null;\r\n        History.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.accounts.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(\r\n                () => this.user = user\r\n            )\r\n            this.startRefreshTokenTimer(user);\r\n        } catch(error) {\r\n            console.log(error);\r\n            \r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.accounts.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(()=>{\r\n                this.user = user;\r\n            });\r\n            console.log(user);\r\n            History.push('/events');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw (error);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image\r\n        }\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if(this.user) {\r\n            this.user.displayName = displayName;\r\n        }\r\n    }\r\n\r\n    getfacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if(response.status === \"connected\") {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    // facebookLogin = () => {\r\n    //     this.fbLoading = true;\r\n    //     const apiLogin = (accessToken: string) => {\r\n    //         agent.accounts.fbLogin(accessToken).then(user => {\r\n    //             store.commonStore.setToken(user.token);\r\n    //             runInAction(() => {\r\n    //                 this.user = user;\r\n    //                 this.fbLoading = false;\r\n    //             })\r\n    //             History.push(\"/events\")\r\n    //         }).catch(error => {\r\n    //             console.log(error);\r\n    //             runInAction(() => {\r\n    //                 this.fbLoading = false;\r\n    //             })\r\n    //         })\r\n    //         if(this.fbAccessToken) {\r\n    //             apiLogin(this.fbAccessToken);\r\n    //         } else {\r\n    //             window.FB.login(response => {\r\n    //                 apiLogin(response.authResponse.accessToken);\r\n    //             }, {scope: \"public_profile, email\"})\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.accounts.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                History.push('/events');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    refreshToken = async () =>  {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.accounts.refreshToken();\r\n            runInAction(() => {\r\n                this.user = user;\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearInterval(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport CommentStore from \"./CommentStore\";\r\nimport commonStore from \"./CommonStore\";\r\nimport eventStore from \"./eventStore\";\r\nimport ModalStore from \"./ModalStore\";\r\nimport ProfileStore from \"./ProfileStore\";\r\nimport UserStore from \"./UserStore\";\r\n\r\ninterface Store{\r\n    eventStore: eventStore,\r\n    commonStore: commonStore,\r\n    userStore: UserStore,\r\n    modalStore: ModalStore,\r\n    profileStore: ProfileStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store : Store = {\r\n    eventStore : new eventStore(),\r\n    commonStore: new commonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore : new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const eventContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(eventContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../Models/ServerError\";\r\n\r\nexport default class commonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded: boolean = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt' ,token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError=(ServerError: ServerError)=>{\r\n        this.error = ServerError;\r\n\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        if (token) {\r\n            this.token = token;\r\n        }\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../Models/Comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (eventId: string) => {\r\n        if(store.eventStore.selectedEvent) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                                           .withUrl(process.env.REACT_APP_CHAT_URL + \"?EventID=\" + eventId, {\r\n                                               accessTokenFactory: () => store.userStore.user?.token!\r\n                                           })\r\n                                           .withAutomaticReconnect()\r\n                                           .configureLogging(LogLevel.Information)\r\n                                           .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(error));\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    this.comments.forEach(comment => comment.createdAt = new Date(comment.createdAt));\r\n                });\r\n                this.comments = comments;\r\n            });\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    } \r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(error));\r\n    }\r\n\r\n    clearComment = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.eventId = store.eventStore.selectedEvent?.id;\r\n        try {\r\n            this.hubConnection?.invoke(\"SendComment\", values)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../Stores/store\";\r\n\r\n\r\nexport default observer( function NavBar(){\r\n\r\n    const {userStore: {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container >\r\n                <Menu.Item exact as={NavLink} to='/' header>\r\n                    <img src=\"/assets/logo.png\" alt=\"Logo\" style={{marginRight: '50px'}}></img>\r\n\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/events' name=\"Events\"/>\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Test errors\"/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createEvent' positive content='Create Event'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || 'assets/user.png'} avatar spaced='right'/>\r\n                    <Dropdown inverted='true' pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                           <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My profile' icon='user' />\r\n                           <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n\r\n        </Menu>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Icon, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\n\r\n\r\nexport default observer(function EventFilter(){\r\n    const {eventStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size={\"large\"} style={{width: '100%'}}>\r\n              <Header attached color='teal'>\r\n              <Icon name=\"filter\"/>Filters\r\n              </Header>\r\n              <Menu.Item\r\n               active={predicate.has('all')}\r\n               onClick={() => setPredicate('all', 'true')}\r\n               content='All events'/>\r\n              <Menu.Item  \r\n               content=\"I'm attending\"\r\n               active={predicate.has('isGoing')}\r\n               onClick={() => {\r\n                   setPredicate('isGoing', 'true')\r\n                   console.log(predicate)\r\n                }}\r\n              />\r\n              <Menu.Item \r\n               content=\"I'm hosting\"\r\n               active={predicate.has('isHost')}\r\n               onClick={() => setPredicate('isHost', 'true')}\r\n               />\r\n        </Menu>\r\n        <Header></Header>\r\n        <Calendar onChange={(date: Date) => setPredicate('startDate', date)} value={predicate.get('startDate') || new Date()}></Calendar>\r\n        </>\r\n\r\n        \r\n    )\r\n}\r\n)","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../App/Models/Profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n        return str.length > 50 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n        }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'}/>\r\n            <Card.Content>\r\n                <Card.Header>\r\n                    {profile.displayName}\r\n                </Card.Header>\r\n                <Card.Description>\r\n                    {truncate(profile.bio)}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                Followers\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../App/Models/Profile\";\r\nimport ProfileCard from \"../../Profiles/ProfileCard\";\r\n\r\ninterface Props{\r\n    interestees: Profile[];\r\n}\r\n\r\nexport default observer(function EventListItemInterestee({interestees}: Props) {\r\n    return (\r\n        <List horizontal>\r\n           {interestees.map(interestee => (\r\n                <Popup hoverable key={interestee.username} trigger={\r\n                    <List.Item key={interestee.username} as={Link} to={`/profiles/${interestee.username}`}>\r\n                       <Image size=\"mini\" circular src={interestee.image || 'assets/user.png'}/>\r\n                    </List.Item>\r\n                }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={interestee}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n           ))}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns/esm\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Grid, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { IEvent } from \"../../../App/Models/Event\";\r\nimport EventListItemInterestee from \"./EventListItemInterestee\";\r\n\r\ninterface IProps {\r\n    event : IEvent;\r\n}\r\n\r\nexport default observer( function EventListItem({event}: IProps){\r\n\r\n    return(\r\n        <Segment.Group>\r\n            <Segment>\r\n                {event.isCancelled &&\r\n                  <Label attached='top'color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                    <Item.Image style={{marginBottom: 3}} size='tiny' circular src={event.host?.image || '/assets/user.png'}></Item.Image>\r\n                    <Item.Content>\r\n                        <Item.Header as={Link} to={`events/${event.id}`}>\r\n                            {event.title}\r\n                        </Item.Header>\r\n                        <Item.Description>\r\n                            {/* Created by {event.host?.displayName} */}\r\n                            <Link to={`profiles/${event.hostUsername}`}>{event.host?.displayName}</Link>\r\n                        </Item.Description>\r\n                        {event.isHost && (\r\n                            <Item.Description>\r\n                                <Label basic color='purple'>\r\n                                    You are hosting this event\r\n                                </Label>\r\n                            </Item.Description>\r\n                        )}\r\n                       {!event.isHost && event.isGoing &&(\r\n                            <Item.Description>\r\n                                <Label basic color='green'>\r\n                                    You are interested in this event\r\n                                </Label>\r\n                            </Item.Description>\r\n                        )}\r\n                    </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Grid>\r\n                        <Grid.Column width='6'>\r\n                            <Icon name='clock'/> {format(event.date!,'dd MMM yyy h:mm aa') }\r\n                        </Grid.Column>\r\n           \r\n                        <Grid.Column width='6'>\r\n                            <Icon name='map marker'/> {event.region}\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <EventListItemInterestee interestees={event.interestees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {event.description}\r\n                </span>\r\n                <Button as={Link} to={`/events/${event.id}`} color='teal' floated='right' content='View'></Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header, Item } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport EventListItem from \"./EventListItem\";\r\n\r\n\r\nexport default observer(function EventsList(){\r\n\r\n    const {eventStore} = useStore();\r\n    const {groupedEvents} = eventStore;\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n           {groupedEvents.map((e)=>(\r\n               <Fragment key={e[0]}>\r\n                   <Header sub color='teal'>\r\n                       {e[0]}\r\n                   </Header>\r\n                 \r\n            <Item.Group divided>\r\n                {e[1].map(event =>\r\n                    (\r\n                        <EventListItem key={event.id} event={event}/>\r\n    ))}\r\n            </Item.Group>\r\n      \r\n               </Fragment>\r\n           ))}\r\n        </>\r\n       \r\n\r\n    )\r\n}\r\n)\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function EventListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../App/Models/Pagination\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport EventFilter from \"./EventFilter\";\r\nimport EventsList from \"./EventsList\";\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport EventListItemPlaceholder from \"./eventListItemPlaceholder\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default observer(function EventDashboard(){\r\n        const{eventStore} = useStore();\r\n        const {loadEvents, eventsRegistry, setPagingParams, pagination} = eventStore;\r\n        const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n        function handleLoadingNext(){\r\n            setLoadingNext(true);\r\n            setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n            loadEvents().then(() => setLoadingNext(false));\r\n        }\r\n\r\n        useEffect(()=>{\r\n         if(eventsRegistry.size <= 1)  loadEvents();\r\n        }, [eventStore, loadEvents, eventsRegistry.size])\r\n      \r\n        \r\n    return (\r\n\r\n       \r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                {eventStore.loadingInitial && ! loadingNext ? (\r\n                    <>\r\n                      <EventListItemPlaceholder/>\r\n                      <EventListItemPlaceholder/>\r\n                    </>\r\n                ) : \r\n                <InfiniteScroll\r\n                pageStart={0}\r\n                loadMore={handleLoadingNext}\r\n                hasMore={!loadingNext && !! pagination && pagination.currentPage < pagination.totalPages}\r\n                initialLoad={false}>\r\n                    <EventsList/>\r\n                </InfiniteScroll>\r\n                }     \r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n               <h2>Events filter</h2>\r\n                <EventFilter/>\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n} )  ","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    type?: string,\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextInput(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}    \r\n        </Form.Field>\r\n\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../App/Common/Form/MyTextInput';\r\nimport { useStore } from '../../App/Stores/store';\r\n\r\n\r\nexport default observer( function LoginForm(){\r\n\r\n    const {userStore} = useStore()\r\n    return (\r\n        <Formik\r\n        initialValues={{username : '', password: '',error:null}}\r\n        onSubmit={(values, {setErrors}) => userStore.login(values).catch(err => setErrors({error: \"Invalid email or username\" }))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to events!' color='teal'/>\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error'\r\n                      render={()=> <Label style={{marginBottom: '10px'}} color='red' basic content={errors.error} />}\r\n                      />\r\n                    <Button loading={isSubmitting} positive content=\"Login\" type='submit' fluid />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n}\r\n)","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    errors: any;\r\n}\r\nexport default function ValidationErrors({errors}: Props){\r\n    return (\r\n        <Message error>\r\n            {errors &&(\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any)=>(\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../App/Common/Form/MyTextInput';\r\nimport { useStore } from '../../App/Stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\n\r\nexport default observer( function RegisterForm(){\r\n\r\n    const {userStore} = useStore()\r\n    return (\r\n        <Formik\r\n        initialValues={{displayName: '', email:'' ,username : '', password: '',error:null}}\r\n        onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => setErrors({error }))}\r\n        validationSchema={Yup.object({\r\n            displayName: Yup.string().required(),\r\n            username: Yup.string().required(),\r\n            email: Yup.string().required().email(),\r\n            password: Yup.string().required(),\r\n        })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid , dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to events!' color='teal'/>\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='displayName' placeholder='Dispalyname' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error'\r\n                      render={()=> <ValidationErrors  errors={errors.error}/>}\r\n                      />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content=\"Register\" type='submit' fluid />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Divider, Grid, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport LoginForm from \"../Users/LoginForm\";\r\nimport RegisterForm from \"../Users/RegisterForm\";\r\n\r\nexport default observer( function HomePage(){\r\n\r\n    const {userStore, modalStore} = useStore()\r\n\r\n    return (\r\n       <Segment textAlign='center' vertical className=\"mainHeader\">\r\n           {/* <Container> */}\r\n              <Grid >\r\n                  <Grid.Column width={'5'} >\r\n                      <img  alt='counting stars img'  src='/assets/counting-stars.svg'></img>\r\n                  </Grid.Column>\r\n                  <Grid.Column width={'6'} >\r\n                      <Header as='h1' content='Reach for the sky'/>\r\n                      <Header as='h2' style={{color: 'GrayText'}}>Join us so you can stay up to date and never miss an event</Header>\r\n                      \r\n                      {userStore.isLoggedIn ? (\r\n                          <>\r\n                          <Header as='h2' style={{color: 'GrayText'}}></Header>\r\n                          <Button style={{marginTop: '2em'}} as={Link} to='/events' size='massive' color='blue'>Go to events</Button>\r\n                          </>\r\n                      ):(\r\n                          <>\r\n                        <Button style={{marginTop: '2em'}} onClick={() => modalStore.openModal(<LoginForm />)} to='/login' size='massive' color='blue'>Login</Button>\r\n                        <Button style={{marginTop: '2em'}} onClick={() => modalStore.openModal(<RegisterForm/>)} to='/login' size='massive' color='blue'>Register</Button>\r\n                        <Divider horizontal inverted>\r\n                            Or\r\n                        </Divider>\r\n                        <Button loading={userStore.fbLoading} size=\"huge\" content=\"Login With Facebook\" inverted color=\"facebook\" onClick={userStore.facebookLogin}/>\r\n                        </>\r\n                      )}\r\n                      \r\n                  </Grid.Column>\r\n                  <Grid.Column width={'5'} >\r\n                      <img   alt='space img'  src='/assets/space.svg'></img>\r\n                  </Grid.Column>\r\n              </Grid>\r\n           {/* </Container> */}\r\n\r\n       </Segment>\r\n    )\r\n}\r\n)","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface IProps{\r\n    inverted?: boolean,\r\n    content?: string,\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true, content = \"Loading...\"}: IProps){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n           <Loader content={content}/>\r\n        </Dimmer>\r\n\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    type?: string,\r\n    rows: number,\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextArea(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}    \r\n        </Form.Field>\r\n\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    options: any,\r\n    label?: string\r\n}\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n            clearable\r\n            options={props.options}\r\n            value={field.value || null}\r\n            onChange={(e,d)=>helpers.setValue(d.value)}\r\n            onBlur={()=>helpers.setTouched(true)}\r\n            placeholder={props.placeholder}\r\n             />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}    \r\n        </Form.Field>\r\n\r\n    )\r\n}","export const categoryOption = [\r\n    {text: 'Meteor', value:'meteor'},\r\n    {text: 'Solar and lunar eclipses', value:'solar and lunar eclipses'},\r\n    {text: 'Comet flybys', value:'comet flybys'},\r\n    {text: 'Solstices', value:'solstices'}\r\n];","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from \"react-datepicker\";\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n            {...field}\r\n            {...props}\r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={value=>helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}    \r\n        </Form.Field>\r\n\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../App/Layout/LoadingComponent\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../App/Common/Form/MyTextInput\";\r\nimport MyTextArea from \"../../../App/Common/Form/MyTextArea\";\r\nimport MySelectInput from \"../../../App/Common/Form/MySelectInput\";\r\nimport { categoryOption } from \"../../../App/Common/Options/CategoryOptions\";\r\nimport MyDateInput from \"../../../App/Common/Form/MyDateInput\";\r\nimport { EventFormValues } from \"../../../App/Models/Event\";\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n\r\n\r\n\r\n\r\nexport default observer( function EventForm(){\r\n\r\n    const {eventStore} = useStore();\r\n    const{updateEvent, loading,createEvent, loadEventById}= eventStore;\r\n    const {id} = useParams<{id: string}>();\r\n    const history = useHistory();\r\n    const [event, setEvent] = useState<EventFormValues>(new EventFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('the title is required'),\r\n        description: Yup.string().required('The description is required'),\r\n        categories: Yup.string().required('the category is required').nullable(),\r\n        date: Yup.string().required('The date is required'),\r\n        region: Yup.string().required('The region is required')\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if (id) {\r\n            loadEventById(id).then(event => setEvent(new EventFormValues(event)))\r\n        }\r\n    },[id, loadEventById])\r\n\r\n    // const initialState = eventStore.selectedEvent ?? {\r\n    //     id:'',\r\n    //     title:'',\r\n    //     description:'',\r\n    //     date:'',\r\n    //     region:'',\r\n    //     categories: ''\r\n    // }\r\n\r\n\r\n    function handleFormSubmit(event: EventFormValues){\r\n        console.log(event);\r\n        if (!event.id) {\r\n            // let newEvent = {\r\n            //     ...event,\r\n            //     id : uuid()\r\n            // }\r\n            let newEvent = event;\r\n            newEvent.id = uuid();\r\n            createEvent(newEvent).then(()=> history.push(`/events/${event.id}`));\r\n        } else {\r\n            updateEvent(event).then(()=> history.push(`/events/${event.id}`));\r\n        }\r\n    }\r\n\r\n    // function handleInputChange(Event : ChangeEvent<HTMLInputElement | HTMLTextAreaElement>){\r\n    //     const {name, value} = Event.target;\r\n    //     setEvent({...event,[name]: value});\r\n    // }\r\n\r\n    if (loading) {\r\n        return <LoadingComponent content='loading event...'/>\r\n    }\r\n\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Event details' subheader color='teal'/>\r\n            <Formik enableReinitialize\r\n             initialValues={event}\r\n              onSubmit={values => handleFormSubmit(values)}\r\n              validationSchema={validationSchema}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty})=>\r\n                              <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                                  <MyTextInput placeholder='Title' name='title'/>\r\n                                  <MyTextArea rows={3} placeholder='Description' name='description'/>\r\n                                  <MySelectInput placeholder='Category' name='categories' options={categoryOption}/>\r\n                                  <MyDateInput \r\n                                  placeholderText='Date'\r\n                                  name='date'\r\n                                  showTimeSelect\r\n                                  timeCaption='time'\r\n                                  dateFormat='MMMM d, yyy h:mm aa'\r\n                                  />\r\n                                   <Header content='Location details' subheader color='teal'/>\r\n                                  <MyTextInput placeholder='Region'  name='region'/>\r\n              \r\n                                  <Button\r\n                                   disabled={isSubmitting || !dirty || !isValid}\r\n                                   loading={isSubmitting}\r\n                                   floated='right' positive type='submit' content='Submit'\r\n                                   \r\n                                  />\r\n                                  <Button as={Link} to='/events' floated='right'  type='submit' content='Cancel' />\r\n                          </Form>\r\n                }\r\n            </Formik>\r\n        </Segment>\r\n\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../App/Stores/store';\r\nimport * as Yup from 'yup';\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow'\r\n\r\ninterface Props {\r\n    eventId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ eventId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n    useEffect(() => {\r\n        if (eventId) {\r\n            commentStore.createHubConnection(eventId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComment()\r\n        }\r\n    }, [commentStore, eventId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                        onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: \"\" }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}                   >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className=\"ui form\">\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div>\r\n                                            <Loader active={isSubmitting}/>\r\n                                                <textarea\r\n                                                    placeholder='Enter to submit your comment, Enter + shift for new line'\r\n                                                    rows={2}\r\n                                                    {...props.field}\r\n                                                    onKeyPress={e => {\r\n                                                        if (e.key === 'Enter' && e.shiftKey) {\r\n                                                            return;\r\n                                                        }\r\n                                                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                            e.preventDefault();\r\n                                                            isValid && handleSubmit();\r\n                                                        }\r\n                                                    }}\r\n                                                />                                    \r\n                                        </div>\r\n                                        )}\r\n                                </Field>\r\n                            </Form>\r\n                              )}\r\n                          </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(new Date(comment.createdAt))}</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                        ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { IEvent } from '../../../App/Models/Event';\r\nimport { useStore } from '../../../App/Stores/store';\r\n\r\nconst eventImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst eventImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    event: IEvent;\r\n}\r\n\r\nexport default observer (function EventDetailedHeader({event}: Props) {\r\n    const {eventStore : {updateInterest, loading, cancelEventToggel}} = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {event.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} ribbon color='red' content='Cancelled'/>\r\n                }\r\n                <Image src={`/assets/categoryImages/${event.categories}.jpg`} fluid style={eventImageStyle}/>\r\n                <Segment style={eventImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={event.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(event.date!, 'dd MMM yyyy') }</p>\r\n                                <p>\r\n                                    Added by <strong><Link to={`/profile/${event.host?.username}`}>{event.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {event.isHost ? (\r\n                    <>\r\n                    <Button color={event.isCancelled ? 'red' : 'green'}\r\n                            floated='left'\r\n                            basic\r\n                            content={event.isCancelled ? 'Reactivate event' : 'Cancel event'}\r\n                            onClick={cancelEventToggel}\r\n                            loading={loading}\r\n                    />\r\n                      <Button as={Link}\r\n                              to={`/manage/${event.id}`}\r\n                              color='orange'\r\n                              floated='right'\r\n                              disabled={event.isCancelled}>\r\n                          Manage Event\r\n                      </Button>\r\n                    </>\r\n                ) : event.isGoing ? (\r\n                    <Button loading={loading} onClick={updateInterest}>Cancel </Button>\r\n                ) : (\r\n                    <Button disabled={event.isCancelled} loading={loading} onClick={updateInterest} color='teal'>Join Event</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { IEvent } from '../../../App/Models/Event';\r\n\r\n\r\ninterface Props {\r\n    event: IEvent\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({event}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{event.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(event.date!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{event.region}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { IEvent } from '../../../App/Models/Event'\r\n\r\ninterface Props {\r\n    event: IEvent;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({event : {interestees, host}}: Props) {\r\n    if(!interestees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {interestees.length} {interestees.length === 1 ? 'Person' : 'People'} interested\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {interestees.map(interestee => (\r\n                        <Item key={interestee.username} style={{ position: 'relative' }}>\r\n                            {interestee.username === host?.username && \r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>}\r\n                        <Image size='tiny' src={interestee.image || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${interestee.username}`}>{interestee.displayName}</Link>\r\n                            </Item.Header>\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../App/Layout/LoadingComponent\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport EventDetailedChat from \"./EventDetailedChat\";\r\nimport EventDetailedHeader from \"./EventDetailedHeader\";\r\nimport EventDetailedInfo from \"./EventDetailedInfo\";\r\nimport EventDetailedSideBar from \"./EventDetailedSideBar\";\r\n\r\n\r\nexport default observer(function ActivityDetails(){\r\n  const {eventStore} = useStore();\r\n  const {selectedEvent: event, loadEventById, loadingInitial, clearSelectedEvent} = eventStore;\r\n  const {id} = useParams<{id: string}>();\r\n\r\n  useEffect(()=> {\r\n    if (id) loadEventById(id);\r\n    return () => clearSelectedEvent();\r\n  },[id, loadEventById, clearSelectedEvent]);\r\n\r\n  if(!event || loadingInitial) return <LoadingComponent/>;\r\n    return (\r\n       <Grid>\r\n         <Grid.Column width={10}>\r\n           <EventDetailedHeader event={event}/>\r\n                <EventDetailedInfo event={event} />\r\n                <EventDetailedChat eventId={event.id} />\r\n         </Grid.Column>\r\n         <Grid.Column width={6}>\r\n           <EventDetailedSideBar event={event}/>\r\n         </Grid.Column>\r\n       </Grid>\r\n    )\r\n}\r\n)","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'events/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'events', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n              <ValidationErrors errors={errors}></ValidationErrors>\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Segment, Image, Grid } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound(){\r\n    return (\r\n        <Segment >\r\n            <Image  size='large' centered  src='/assets/404.svg'></Image>\r\n            <Header size='medium' textAlign='center' content='Oops, we have looked and could not found this'/>\r\n            <Grid>\r\n               <Grid.Column textAlign=\"center\">\r\n                  <Button as={Link} style={{position: 'center'}} to='events'  primary content='Return to events page'/>\r\n               </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\nexport default observer( function ServerError(){\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as={'h1'}>Server error</Header>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n              <Segment>\r\n                  <Header as='h4' content='stack trace' color='teal'/>\r\n                  <code style={{marginTop: '10px'}}>\r\n                      {commonStore.error.details}\r\n                  </code>\r\n              </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../Stores/store\";\r\n\r\nexport default observer(function(){\r\n    \r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={()=>modalStore.closeModal()} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport * as Yup from 'yup';\r\nimport MyTextArea from \"../../App/Common/Form/MyTextArea\";\r\nimport MyTextInput from \"../../App/Common/Form/MyTextInput\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\ninterface Props {\r\nsetEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\nconst {profileStore: {profile, updateProfile}} = useStore();\r\nreturn (\r\n<Formik\r\ninitialValues={{displayName: profile?.displayName, bio:\r\nprofile?.bio}}\r\nonSubmit={values => {\r\nupdateProfile(values).then(() => {\r\nsetEditMode(false);\r\n})\r\n}}\r\nvalidationSchema={Yup.object({\r\ndisplayName: Yup.string().required()\r\n})}\r\n>\r\n{({isSubmitting, isValid, dirty}) => (\r\n<Form className='ui form'>\r\n<MyTextInput placeholder='Display Name'\r\nname='displayName' />\r\n<MyTextArea rows={3} placeholder='Add your bio'\r\nname='bio' />\r\n<Button\r\npositive\r\ntype='submit'\r\nloading={isSubmitting}\r\ncontent='Update profile'\r\nfloated='right'\r\ndisabled={!isValid || !dirty}\r\n/>\r\n</Form>\r\n)}\r\n</Formik>\r\n)\r\n})","import React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../App/Stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={profile?.displayName} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../App/Stores/store';\r\nimport { UserEvent } from '../../App/Models/Profile';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'host' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadAllUserEvents,\r\n        loadUserEvents,\r\n        profile,\r\n        loadingEvents,\r\n        userEvents\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadAllUserEvents(profile!.username);\r\n    }, [loadAllUserEvents, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserEvents(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingEvents}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userEvents.map((event: UserEvent) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/events/${event.id}`}\r\n                                key={event.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${event.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{event.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(event.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(event.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper ) => void;\r\n}\r\n\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n        src={imagePreview}\r\n        style={{height: 200, width: '100%'}}\r\n        initialAspectRatio={1}\r\n        aspectRatio={1}\r\n        preview='.img-preview'\r\n        guides={false}\r\n        viewMode={1}\r\n        autoCropArea={1}\r\n        background={false}\r\n        onInitialized={cropper => setCropper(cropper)}/>\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green',\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n      setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n      })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon size='huge' name='upload'/>\r\n      <Header content='Drop file here'/>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, ButtonGroup, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props{\r\n    uploadPhoto: (file: Blob) => void;\r\n    uploading: boolean\r\n}\r\n\r\nexport default function PhotoUploadWidget({uploadPhoto, uploading}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n    \r\n    function onCrop() {\r\n        if(cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header subheader color='teal' content='Step 1 - Add Photo'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}></Grid.Column>\r\n            <Grid.Column width={4}>\r\n                <Header subheader color='teal' content='Step 2 - Resize Photo'/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}></Grid.Column>\r\n            <Grid.Column width={4}>\r\n                <Header subheader color='teal' content='Step 3 - Preview and upload Photo'/>\r\n                {files && files.length > 0 &&\r\n                <>\r\n                   <div className='img-preview' style={{minHeight : 200, overflow : 'hidden'}}></div>\r\n                   <ButtonGroup widths={2}>\r\n                       <Button loading={uploading} onClick={onCrop} positive icon='check'/>\r\n                       <Button disabled={uploading} onClick={() => setFiles([])} icon='close'/>\r\n                   </ButtonGroup>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button, ButtonGroup} from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../App/Common/ImageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../App/Models/Profile\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false))\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                   <Header floated='left' icon='image' content='Photos'/>\r\n                   {isCurrentUser && (\r\n                       <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} onClick={() => setAddPhotoMode(!addPhotoMode)}/>\r\n                   )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} uploading={uploading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                        {profile.photos?.map(photo => (\r\n                            <Card key={photo.id}>\r\n                            <Image src={photo.url}/>\r\n                            {isCurrentUser && (\r\n                                <ButtonGroup fluid widths={2}>\r\n                                    <Button basic color='green' content='Main' name={'main' + photo.id} disabled={photo.isMain}\r\n                                    loading={target === 'main' + photo.id && loading}\r\n                                    onClick={e => handleSetMainPhoto(photo, e)}/>\r\n                                    <Button basic color='red' icon='trash'\r\n                                    loading={target === photo.id && loading}\r\n                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                    disabled= {photo.isMain}\r\n                                    name={photo.id}\r\n                                    /> \r\n                                </ButtonGroup>\r\n                            )}\r\n                        </Card>\r\n                        ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/Profile\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileEvents from \"./ProfileEvents\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}: Props){\r\n    const panes = [\r\n        {menuItem: \"About\", render: () => <ProfileAbout/>},\r\n        {menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile}/>},\r\n        {menuItem: \"Events\", render: () => <ProfileEvents/>},\r\n        {menuItem: \"Followers\", render: () => <Tab.Pane>Followers Content</Tab.Pane>},\r\n        {menuItem: \"Following\", render: () => <Tab.Pane>Following Content</Tab.Pane>}   \r\n    ];\r\n    return (\r\n        <Tab\r\n           menu={{fluid: true, vertical: true}}\r\n           menuPosition='right'\r\n           panes={panes}\r\n        />\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/Profile\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfileHeader({profile}: Props){\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || \"/assets/user.png\"}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group>\r\n                        <Statistic label='Followers' value='5' />\r\n                        <Statistic label='Following' value='42' />\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    <Reveal animated='move'>\r\n                        <Reveal.Content visible style={{width: '100%'}}>\r\n                           <Button fluid color='purple' content='Following'/>\r\n                        </Reveal.Content>\r\n                        <Reveal.Content hidden style={{width: '100%'}}>\r\n                           <Button basic fluid color={true ? 'red' : 'green'} content={true ? 'Unfollow' : 'Follow'}/>\r\n                        </Reveal.Content>\r\n                    </Reveal>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../App/Layout/LoadingComponent\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer( function ProfilePage(){\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore: {loadProfile, profile, loadingProfile}} = useStore();\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n    }, [loadProfile, username])\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading componnent'/>\r\n    return (\r\n       <Grid>\r\n           <Grid.Column width={16}>\r\n               {profile &&\r\n               <>\r\n                <ProfileHeader profile={profile}/>    \r\n                <ProfileContent profile={profile}/>\r\n               </>}\r\n           </Grid.Column>\r\n       </Grid>\r\n    )\r\n}\r\n)","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../Stores/store\";\r\n\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport NavBar from './NavBar';\r\nimport EventDashboard from '../../Features/Events/Dashboard/EventDashboard';\r\nimport {  Container } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../Features/Home/HomePage';\r\nimport EventForm from '../../Features/Events/Form/EventForm';\r\nimport EventDetails from '../../Features/Events/Details/EventDetails';\r\nimport TestErrors from '../../Features/errors/TestErrors';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../Features/errors/NotFound';\r\nimport ServerError from '../../Features/errors/ServerError';\r\nimport { useStore } from '../Stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModelContainer from '../Common/Modals/ModelContainer';\r\nimport ProfilePage from '../../Features/Profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n  useEffect(() => {\r\n    if(commonStore.token){\r\n      userStore.getUser().finally(()=> commonStore.setAppLoaded())\r\n    } else {\r\n      userStore.getfacebookLoginStatus().then(() => commonStore.setAppLoaded())\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading App ...'/>\r\n\r\n  return (\r\n    \r\n    <>\r\n    <ToastContainer position=\"bottom-right\" hideProgressBar></ToastContainer>\r\n    <ModelContainer/>\r\n    <Route exact path='/' component={HomePage} />\r\n    <Route\r\n    path={'/(.+)'}\r\n    render={()=>(\r\n      <>      <NavBar/>\r\n      <div style={{marginTop: '5em'}}></div>\r\n      <Container>\r\n      <Switch>\r\n      <PrivateRoute exact path='/events' component={EventDashboard} />\r\n      <PrivateRoute path='/events/:id' component={EventDetails} />\r\n      <PrivateRoute key={location.key} path={['/createEvent','/manage/:id']} component={EventForm} />\r\n      <PrivateRoute path='/Profiles/:username' component={ProfilePage}/>\r\n      <PrivateRoute path='/errors' component={TestErrors}/>\r\n      <Route path='/server-error' component={ServerError}/>\r\n      <Route component={NotFound}/>\r\n      </Switch>\r\n\r\n      </Container></>\r\n  )} \r\n    />\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App) ;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './App/Layout/index.css';\r\nimport App from './App/Layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { eventContext, store } from './App/Stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './App/Layout/ScrollToTop';\r\n\r\nexport const History = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <eventContext.Provider value={store}>\r\n      <Router history={History}>\r\n        <ScrollToTop/>\r\n        <App />\r\n      </Router>\r\n    </eventContext.Provider>,\r\n  \r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}